/* testTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. testTokenManager.java */
package html.parser;
import java.util.Scanner;

/** Token Manager. */
@SuppressWarnings("unused")public class testTokenManager implements testConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x2L) != 0L)
            return 109;
         if ((active0 & 0x200000000000000L) != 0L)
            return 1;
         if ((active0 & 0x1ffffffbd7e00L) != 0L)
            return 12;
         if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 50;
            return 109;
         }
         return -1;
      case 1:
         if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 1;
            return 109;
         }
         return -1;
      case 2:
         if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 2;
            return 109;
         }
         return -1;
      case 3:
         if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 3;
            return 109;
         }
         return -1;
      case 4:
         if ((active0 & 0x80000000000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 50;
               jjmatchedPos = 3;
            }
            return -1;
         }
         return -1;
      case 5:
         if ((active0 & 0x80000000000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 50;
               jjmatchedPos = 3;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 32:
         return jjStartNfaWithStates_0(0, 1, 109);
      case 34:
         return jjStopAtPos(0, 56);
      case 47:
         return jjStartNfaWithStates_0(0, 57, 1);
      case 60:
         jjmatchedKind = 48;
         return jjMoveStringLiteralDfa1_0(0xffffffbd7e00L);
      case 62:
         return jjStopAtPos(0, 49);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x100L);
      case 72:
         return jjMoveStringLiteralDfa1_0(0xc0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x80000000000000L);
      default :
         return jjMoveNfa_0(3, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 47:
         return jjMoveStringLiteralDfa2_0(active0, 0xaaaaaaa95400L);
      case 66:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000L);
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0x80L);
      case 72:
         return jjMoveStringLiteralDfa2_0(active0, 0x555000000L);
      case 76:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000L);
      case 79:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000100L);
      case 80:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000L);
      case 83:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000L);
      case 84:
         return jjMoveStringLiteralDfa2_0(active0, 0x140a40L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000000L);
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 49:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000L);
      case 50:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000L);
      case 51:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000L);
      case 52:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000L);
      case 53:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000L);
      case 54:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000L);
      case 62:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(2, 13);
         break;
      case 65:
         return jjMoveStringLiteralDfa3_0(active0, 0x10280L);
      case 66:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000L);
      case 68:
         return jjMoveStringLiteralDfa3_0(active0, 0x900100L);
      case 72:
         return jjMoveStringLiteralDfa3_0(active0, 0xaaa000000L);
      case 73:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000800L);
      case 76:
         return jjMoveStringLiteralDfa3_0(active0, 0x240000000000L);
      case 77:
         return jjMoveStringLiteralDfa3_0(active0, 0x40L);
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000L);
      case 80:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000004000L);
      case 82:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000L);
      case 83:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000L);
      case 84:
         return jjMoveStringLiteralDfa3_0(active0, 0x281400L);
      case 85:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000L);
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 49:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000L);
      case 50:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000L);
      case 51:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000L);
      case 52:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000L);
      case 53:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000L);
      case 54:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000L);
      case 62:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(3, 14);
         else if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(3, 16);
         else if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(3, 18);
         else if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(3, 20);
         else if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(3, 24);
         else if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(3, 26);
         else if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(3, 28);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(3, 30);
         else if ((active0 & 0x100000000L) != 0L)
            return jjStopAtPos(3, 32);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(3, 34);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(3, 42);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(3, 44);
         break;
      case 65:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000400L);
      case 66:
         return jjMoveStringLiteralDfa4_0(active0, 0x200L);
      case 68:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(3, 7);
         return jjMoveStringLiteralDfa4_0(active0, 0x200000L);
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000801000L);
      case 76:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(3, 6);
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000L);
      case 80:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000L);
      case 82:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000L);
      case 84:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000800L);
      case 85:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000000L);
      case 89:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(3, 8);
         break;
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000L);
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000000L);
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 61:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000000L);
      case 62:
         if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(4, 19);
         else if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(4, 21);
         else if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(4, 25);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(4, 27);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(4, 29);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(4, 31);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStopAtPos(4, 33);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(4, 35);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(4, 43);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStopAtPos(4, 45);
         break;
      case 65:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000L);
      case 66:
         return jjMoveStringLiteralDfa5_0(active0, 0x400L);
      case 76:
         return jjMoveStringLiteralDfa5_0(active0, 0xa00L);
      case 78:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000L);
      case 84:
         return jjMoveStringLiteralDfa5_0(active0, 0xc00000001000L);
      case 86:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x30000000000L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 34:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStopAtPos(5, 55);
         break;
      case 62:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(5, 23);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(5, 36);
         break;
      case 69:
         return jjMoveStringLiteralDfa6_0(active0, 0xa00L);
      case 76:
         return jjMoveStringLiteralDfa6_0(active0, 0x1400L);
      case 78:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000L);
      case 79:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000000L);
      case 84:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000000L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x18000000000L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(6, 9);
         else if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(6, 11);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(6, 37);
         break;
      case 69:
         return jjMoveStringLiteralDfa7_0(active0, 0x1400L);
      case 78:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000000L);
      case 79:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000000L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000000L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000L);
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(7, 10);
         else if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(7, 12);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(7, 46);
         break;
      case 78:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000000L);
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000000L);
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000000000L);
      case 115:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000000L);
      case 121:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(8, 38);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(8, 40);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStopAtPos(8, 47);
         break;
      case 115:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000000L);
      case 121:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStopAtPos(9, 39);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(9, 41);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 109;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0x7ff700100000000L & l) != 0L)
                  {
                     if (kind > 50)
                        kind = 50;
                     { jjCheckNAddTwoStates(0, 2); }
                  }
                  else if (curChar == 60)
                     { jjAddStates(0, 3); }
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 12:
                  if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 109:
                  if ((0x7ff700100000000L & l) != 0L)
                  {
                     if (kind > 50)
                        kind = 50;
                     { jjCheckNAddTwoStates(0, 2); }
                  }
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 0:
                  if ((0x7ff700100000000L & l) == 0L)
                     break;
                  if (kind > 50)
                     kind = 50;
                  { jjCheckNAddTwoStates(0, 2); }
                  break;
               case 1:
                  if (curChar != 47)
                     break;
                  if (kind > 50)
                     kind = 50;
                  { jjCheckNAddTwoStates(0, 2); }
                  break;
               case 2:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 4:
                  if (curChar == 45)
                     { jjCheckNAddTwoStates(5, 7); }
                  break;
               case 5:
                  if ((0x7ff700100000000L & l) != 0L)
                     { jjCheckNAddStates(4, 6); }
                  break;
               case 6:
                  if (curChar == 47)
                     { jjCheckNAddStates(4, 6); }
                  break;
               case 7:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 62 && kind > 5)
                     kind = 5;
                  break;
               case 9:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 14:
                  if (curChar == 32)
                     { jjAddStates(7, 8); }
                  break;
               case 16:
                  if (curChar == 32)
                     { jjAddStates(9, 10); }
                  break;
               case 17:
                  if (curChar == 61)
                     { jjCheckNAddTwoStates(18, 19); }
                  break;
               case 18:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(18, 19); }
                  break;
               case 19:
                  if (curChar == 34)
                     { jjCheckNAddTwoStates(20, 22); }
                  break;
               case 20:
                  if ((0x7ff700100000000L & l) != 0L)
                     { jjCheckNAddStates(11, 13); }
                  break;
               case 21:
                  if (curChar == 47)
                     { jjCheckNAddStates(11, 13); }
                  break;
               case 22:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if (curChar == 34)
                     { jjCheckNAddTwoStates(24, 25); }
                  break;
               case 24:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(24, 25); }
                  break;
               case 25:
                  if (curChar == 62 && kind > 15)
                     kind = 15;
                  break;
               case 30:
                  if (curChar == 32)
                     { jjAddStates(14, 15); }
                  break;
               case 32:
                  if (curChar == 32)
                     { jjAddStates(16, 17); }
                  break;
               case 33:
                  if (curChar == 61)
                     { jjCheckNAddTwoStates(34, 35); }
                  break;
               case 34:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(34, 35); }
                  break;
               case 35:
                  if (curChar == 34)
                     { jjCheckNAddTwoStates(36, 38); }
                  break;
               case 36:
                  if ((0x7ff700100000000L & l) != 0L)
                     { jjCheckNAddStates(18, 20); }
                  break;
               case 37:
                  if (curChar == 47)
                     { jjCheckNAddStates(18, 20); }
                  break;
               case 38:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if (curChar == 34)
                     { jjCheckNAddStates(21, 25); }
                  break;
               case 41:
                  if (curChar == 32)
                     { jjAddStates(26, 27); }
                  break;
               case 42:
                  if (curChar == 61)
                     { jjCheckNAddTwoStates(43, 44); }
                  break;
               case 43:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(43, 44); }
                  break;
               case 44:
                  if (curChar == 34)
                     { jjCheckNAddTwoStates(45, 47); }
                  break;
               case 45:
                  if ((0x7ff700100000000L & l) != 0L)
                     { jjCheckNAddStates(28, 30); }
                  break;
               case 46:
                  if (curChar == 47)
                     { jjCheckNAddStates(28, 30); }
                  break;
               case 47:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 48:
                  if (curChar == 34)
                     { jjCheckNAddStates(31, 34); }
                  break;
               case 50:
                  if (curChar == 32)
                     { jjAddStates(35, 36); }
                  break;
               case 51:
                  if (curChar == 61)
                     { jjCheckNAddTwoStates(52, 53); }
                  break;
               case 52:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(52, 53); }
                  break;
               case 53:
                  if (curChar == 34)
                     { jjCheckNAddTwoStates(54, 56); }
                  break;
               case 54:
                  if ((0x7ff700100000000L & l) != 0L)
                     { jjCheckNAddStates(37, 39); }
                  break;
               case 55:
                  if (curChar == 47)
                     { jjCheckNAddStates(37, 39); }
                  break;
               case 56:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 57:
                  if (curChar == 34)
                     { jjCheckNAddStates(40, 42); }
                  break;
               case 59:
                  if (curChar == 32)
                     { jjAddStates(43, 44); }
                  break;
               case 60:
                  if (curChar == 61)
                     { jjCheckNAddTwoStates(61, 62); }
                  break;
               case 61:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(61, 62); }
                  break;
               case 62:
                  if (curChar == 34)
                     { jjCheckNAddTwoStates(63, 65); }
                  break;
               case 63:
                  if ((0x7ff700100000000L & l) != 0L)
                     { jjCheckNAddStates(45, 47); }
                  break;
               case 64:
                  if (curChar == 47)
                     { jjCheckNAddStates(45, 47); }
                  break;
               case 65:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 66:
                  if (curChar == 34)
                     { jjCheckNAddTwoStates(67, 68); }
                  break;
               case 67:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(67, 68); }
                  break;
               case 68:
                  if (curChar == 62 && kind > 17)
                     kind = 17;
                  break;
               case 71:
                  if (curChar == 32)
                     { jjCheckNAddStates(48, 51); }
                  break;
               case 72:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(72, 70); }
                  break;
               case 78:
                  if (curChar == 32)
                     { jjCheckNAddStates(52, 57); }
                  break;
               case 79:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(79, 77); }
                  break;
               case 84:
                  if (curChar == 32)
                     { jjCheckNAddStates(58, 65); }
                  break;
               case 85:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(85, 83); }
                  break;
               case 91:
                  if (curChar == 32)
                     { jjAddStates(66, 67); }
                  break;
               case 93:
                  if (curChar == 32)
                     { jjAddStates(68, 69); }
                  break;
               case 94:
                  if (curChar == 61)
                     { jjCheckNAddTwoStates(95, 96); }
                  break;
               case 95:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(95, 96); }
                  break;
               case 96:
                  if (curChar == 34)
                     { jjCheckNAddTwoStates(97, 99); }
                  break;
               case 97:
                  if ((0x7ff700100000000L & l) != 0L)
                     { jjCheckNAddStates(70, 72); }
                  break;
               case 98:
                  if (curChar == 47)
                     { jjCheckNAddStates(70, 72); }
                  break;
               case 99:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 98;
                  break;
               case 100:
                  if (curChar == 34)
                     { jjCheckNAddTwoStates(101, 102); }
                  break;
               case 101:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(101, 102); }
                  break;
               case 102:
                  if (curChar == 62 && kind > 22)
                     kind = 22;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
               case 0:
                  if ((0x7fffffe80000000L & l) == 0L)
                     break;
                  if (kind > 50)
                     kind = 50;
                  { jjCheckNAddTwoStates(0, 2); }
                  break;
               case 12:
                  if (curChar == 68)
                     jjstateSet[jjnewStateCnt++] = 107;
                  else if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 88;
                  else if (curChar == 65)
                     { jjAddStates(7, 8); }
                  break;
               case 109:
                  if ((0x7fffffe80000000L & l) == 0L)
                     break;
                  if (kind > 50)
                     kind = 50;
                  { jjCheckNAddTwoStates(0, 2); }
                  break;
               case 5:
                  if ((0x7fffffe80000000L & l) != 0L)
                     { jjAddStates(4, 6); }
                  break;
               case 13:
                  if (curChar == 65)
                     { jjAddStates(7, 8); }
                  break;
               case 15:
                  if (curChar == 102)
                     { jjAddStates(9, 10); }
                  break;
               case 20:
                  if ((0x7fffffe80000000L & l) != 0L)
                     { jjAddStates(11, 13); }
                  break;
               case 26:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 27:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if (curChar == 71)
                     { jjAddStates(14, 15); }
                  break;
               case 31:
                  if (curChar == 99)
                     { jjAddStates(16, 17); }
                  break;
               case 36:
                  if ((0x7fffffe80000000L & l) != 0L)
                     { jjAddStates(18, 20); }
                  break;
               case 40:
                  if (curChar == 72)
                     { jjAddStates(26, 27); }
                  break;
               case 45:
                  if ((0x7fffffe80000000L & l) != 0L)
                     { jjAddStates(28, 30); }
                  break;
               case 49:
                  if (curChar == 84)
                     { jjAddStates(35, 36); }
                  break;
               case 54:
                  if ((0x7fffffe80000000L & l) != 0L)
                     { jjAddStates(37, 39); }
                  break;
               case 58:
                  if (curChar == 84)
                     { jjAddStates(43, 44); }
                  break;
               case 63:
                  if ((0x7fffffe80000000L & l) != 0L)
                     { jjAddStates(45, 47); }
                  break;
               case 69:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 70:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 73:
                  if (curChar == 72)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 74:
                  if (curChar == 71)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 75:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 76:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 77:
                  if (curChar == 72)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 80:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 81:
                  if (curChar == 68)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 82:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 83:
                  if (curChar == 87)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 86:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 87:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 88:
                  if (curChar == 77)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 89:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 88;
                  break;
               case 90:
                  if (curChar == 86)
                     { jjAddStates(73, 75); }
                  break;
               case 92:
                  if (curChar == 83)
                     { jjAddStates(68, 69); }
                  break;
               case 97:
                  if ((0x7fffffe80000000L & l) != 0L)
                     { jjAddStates(70, 72); }
                  break;
               case 103:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 104:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 103;
                  break;
               case 105:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 104;
                  break;
               case 106:
                  if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 107:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 108:
                  if (curChar == 68)
                     jjstateSet[jjnewStateCnt++] = 107;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 109 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   12, 13, 89, 108, 5, 7, 10, 14, 28, 16, 17, 20, 22, 23, 30, 87, 
   32, 33, 36, 38, 39, 83, 77, 70, 68, 84, 41, 42, 45, 47, 48, 77, 
   70, 68, 78, 50, 51, 54, 56, 57, 70, 68, 71, 59, 60, 63, 65, 66, 
   72, 70, 68, 71, 79, 77, 72, 70, 68, 78, 85, 83, 79, 77, 72, 70, 
   68, 84, 91, 106, 93, 94, 97, 99, 100, 91, 106, 102, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, "\110\124\115\114", "\110\105\101\104", 
"\102\117\104\131", "\74\124\101\102\114\105\76", "\74\57\124\101\102\114\105\76", 
"\74\124\111\124\114\105\76", "\74\57\124\111\124\114\105\76", "\74\120\76", "\74\57\120\76", null, 
"\74\57\101\76", null, "\74\124\122\76", "\74\57\124\122\76", "\74\124\104\76", 
"\74\57\124\104\76", null, "\74\57\104\111\126\76", "\74\110\61\76", "\74\57\110\61\76", 
"\74\110\62\76", "\74\57\110\62\76", "\74\110\63\76", "\74\57\110\63\76", "\74\110\64\76", 
"\74\57\110\64\76", "\74\110\65\76", "\74\57\110\65\76", "\74\110\66\76", "\74\57\110\66\76", 
"\74\123\120\101\116\76", "\74\57\123\120\101\116\76", "\74\144\145\164\141\151\154\163\76", 
"\74\57\144\145\164\141\151\154\163\76", "\74\163\165\155\155\141\162\171\76", "\74\57\163\165\155\155\141\162\171\76", 
"\74\117\114\76", "\74\57\117\114\76", "\74\114\111\76", "\74\57\114\111\76", 
"\74\102\125\124\124\117\116\76", "\74\57\102\125\124\124\117\116\76", "\74", "\76", null, null, null, null, 
null, "\154\141\156\147\75\42", "\42", "\57", };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(Exception e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 13 && (0x2600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public testTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public testTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream)
  {
	
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 109; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit( SimpleCharStream stream, int lexState)
  {
  
    ReInit( stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0x387ffffffffffc1L, 
};
static final long[] jjtoSkip = {
   0x3eL, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[109];
    private final int[] jjstateSet = new int[2 * 109];

    
    protected int curChar;
}
