/* test.java */
/* Generated By:JavaCC: Do not edit this line. test.java */
package html.parser;

import java.util.Scanner;
public class test implements testConstants {
  static int TD_Count=0,TR_Count=0,ListItem_Count=0;
  public static void main(String [] arg)
  {
    try
    {
      test parser = new test(System.in);
      String rus = parser.start();
      System.out.print(rus);
    }
    catch (Exception e)
    {
      System.out.print(e);
    }
  }

//----------------------------
  final public String start() throws ParseException {
    HTML_DOC();
{if ("" != null) return "\n---------------\nValid Html Document\n"+"TD Count="+TD_Count+"\nTR Count="+TR_Count;}
    throw new Error("Missing return statement in function");
  }

  final public String HTML_DOC() throws ParseException {String content="no strings";
    jj_consume_token(ST);
    jj_consume_token(HTML);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 55:{
      jj_consume_token(55);
      jj_consume_token(STRING);
      jj_consume_token(56);
      break;
      }
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    jj_consume_token(ND);
    DOC_HEAD();
    DOC_BODY();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STRING:{
        ;
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      content = jj_consume_token(STRING).image;
    }
    jj_consume_token(ST);
    jj_consume_token(57);
    jj_consume_token(HTML);
    jj_consume_token(ND);
System.out.print("HTML - > "+content+'\n');
    {if ("" != null) return content;}
    throw new Error("Missing return statement in function");
  }

  final public String DOC_HEAD() throws ParseException {String content="no strings";
    jj_consume_token(ST);
    jj_consume_token(HEAD);
    jj_consume_token(ND);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STRING:{
        ;
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      content = jj_consume_token(STRING).image;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ST_TITLE:{
      Title();
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STRING:{
        ;
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        break label_3;
      }
      content = jj_consume_token(STRING).image;
    }
    jj_consume_token(ST);
    jj_consume_token(57);
    jj_consume_token(HEAD);
    jj_consume_token(ND);
System.out.print("Head - > "+content+'\n');
    {if ("" != null) return content;}
    throw new Error("Missing return statement in function");
  }

  final public String DOC_BODY() throws ParseException {String content="no strings";
    jj_consume_token(ST);
    jj_consume_token(BODY);
    jj_consume_token(ND);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ST_TABLE:
      case ST_P:
      case ST_A:
      case ST_IMG:
      case ST_DIV:
      case ST_H1:
      case ST_H2:
      case ST_H3:
      case ST_H4:
      case ST_H5:
      case ST_H6:
      case ST_DETAILS:
      case ST_OL:
      case ST_BUTTON:
      case STRING:{
        ;
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ST_P:{
        Paragraph();
        break;
        }
      case ST_A:{
        Anchor();
        break;
        }
      case ST_IMG:{
        IMG();
        break;
        }
      case ST_DIV:{
        DIV();
        break;
        }
      case ST_H1:
      case ST_H2:
      case ST_H3:
      case ST_H4:
      case ST_H5:
      case ST_H6:{
        Header();
        break;
        }
      case ST_DETAILS:{
        details();
        break;
        }
      case ST_TABLE:{
        Table();
        break;
        }
      case ST_OL:{
        List();
        break;
        }
      case ST_BUTTON:{
        Button();
        break;
        }
      case STRING:{
        content = jj_consume_token(STRING).image;
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(ST);
    jj_consume_token(57);
    jj_consume_token(BODY);
    jj_consume_token(ND);
System.out.print("Body - > "+content+'\n');
    {if ("" != null) return content;}
    throw new Error("Missing return statement in function");
  }

  final public void Table() throws ParseException {
    jj_consume_token(ST_TABLE);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ST_TD:{
        ;
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        break label_5;
      }
      TD();
    }
    jj_consume_token(ND_TABLE);
  }

  final public void TD() throws ParseException {
    jj_consume_token(ST_TD);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ST_TR:{
        ;
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        break label_6;
      }
      TR();
    }
    jj_consume_token(ND_TD);
TD_Count++;
  }

  final public String TR() throws ParseException {String content="no strings";
    jj_consume_token(ST_TR);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STRING:{
        ;
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        break label_7;
      }
      content = jj_consume_token(STRING).image;
    }
    jj_consume_token(ND_TR);
TR_Count++;
    System.out.print("TR ["+TR_Count+"]- > "+content+'\n');
    {if ("" != null) return content;}
    throw new Error("Missing return statement in function");
  }

  final public String Title() throws ParseException {String content="no strings";
    jj_consume_token(ST_TITLE);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STRING:{
        ;
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        break label_8;
      }
      content = jj_consume_token(STRING).image;
    }
    jj_consume_token(ND_TITLE);
System.out.print("Title - > "+content+'\n');
    {if ("" != null) return content;}
    throw new Error("Missing return statement in function");
  }

  final public String Paragraph() throws ParseException {String content="no strings";
    jj_consume_token(ST_P);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STRING:{
        ;
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        break label_9;
      }
      content = jj_consume_token(STRING).image;
    }
    jj_consume_token(ND_P);
System.out.print("P - > "+content+'\n');
    {if ("" != null) return content;}
    throw new Error("Missing return statement in function");
  }

  final public String Anchor() throws ParseException {String content="no strings";
    jj_consume_token(ST_A);
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STRING:{
        ;
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        break label_10;
      }
      content = jj_consume_token(STRING).image;
    }
    jj_consume_token(ND_A);
System.out.print("Anchor - > "+content+'\n');
    {if ("" != null) return content;}
    throw new Error("Missing return statement in function");
  }

  final public String IMG() throws ParseException {String content="no strings";
    content = jj_consume_token(ST_IMG).image;
System.out.print("IMG - > "+content+'\n');
    {if ("" != null) return content;}
    throw new Error("Missing return statement in function");
  }

  final public String DIV() throws ParseException {String content="no additional strings";
    jj_consume_token(ST_DIV);
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ST_P:
      case ST_H1:
      case ST_H2:
      case ST_H3:
      case ST_H4:
      case ST_H5:
      case ST_H6:
      case ST_SPAN:
      case ST_OL:
      case ST_BUTTON:
      case STRING:{
        ;
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        break label_11;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ST_P:
      case ST_H1:
      case ST_H2:
      case ST_H3:
      case ST_H4:
      case ST_H5:
      case ST_H6:
      case ST_SPAN:
      case ST_OL:
      case ST_BUTTON:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ST_H1:
        case ST_H2:
        case ST_H3:
        case ST_H4:
        case ST_H5:
        case ST_H6:{
          Header();
          break;
          }
        case ST_BUTTON:{
          Button();
          break;
          }
        case ST_OL:{
          List();
          break;
          }
        case ST_P:{
          Paragraph();
          break;
          }
        case ST_SPAN:{
          Span();
          break;
          }
        default:
          jj_la1[14] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case STRING:{
        content = jj_consume_token(STRING).image;
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(ND_DIV);
System.out.print("DIV - > "+content+'\n');
    {if ("" != null) return content;}
    throw new Error("Missing return statement in function");
  }

  final public String Span() throws ParseException {String content="no additional strings";
    jj_consume_token(ST_SPAN);
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STRING:{
        ;
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        break label_12;
      }
      content = jj_consume_token(STRING).image;
    }
    jj_consume_token(ND_SPAN);
System.out.print("Span - > "+content+'\n');
    {if ("" != null) return content;}
    throw new Error("Missing return statement in function");
  }

  final public String details() throws ParseException {String content="no details string";
    jj_consume_token(ST_DETAILS);
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ST_P:
      case ST_SUMMARY:
      case STRING:{
        ;
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        break label_13;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ST_SUMMARY:{
        summary();
        break;
        }
      case ST_P:{
        Paragraph();
        break;
        }
      case STRING:{
        content = jj_consume_token(STRING).image;
        break;
        }
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(ND_DETAILS);
System.out.print("Details - > "+content+'\n');
    {if ("" != null) return content;}
    throw new Error("Missing return statement in function");
  }

  final public String summary() throws ParseException {String content="no details string";
    jj_consume_token(ST_SUMMARY);
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STRING:{
        ;
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        break label_14;
      }
      content = jj_consume_token(STRING).image;
    }
    jj_consume_token(ND_SUMMARY);
System.out.print("Summary - > "+content+'\n');
    {if ("" != null) return content;}
    throw new Error("Missing return statement in function");
  }

  final public void List() throws ParseException {
    jj_consume_token(ST_OL);
ListItem_Count=0; System.out.print("---------------\n");
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ST_LI:{
        ;
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        break label_15;
      }
      ListItem();
    }
    jj_consume_token(ND_OL);
System.out.print("OL [Count] - > "+ListItem_Count+'\n');
      System.out.print("---------------\n");
  }

  final public String ListItem() throws ParseException {String content="";
    jj_consume_token(ST_LI);
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STRING:{
        ;
        break;
        }
      default:
        jj_la1[21] = jj_gen;
        break label_16;
      }
      content = jj_consume_token(STRING).image;
    }
    jj_consume_token(ND_LI);
ListItem_Count++;
    System.out.print(ListItem_Count+". "+content+'\n');
    {if ("" != null) return content;}
    throw new Error("Missing return statement in function");
  }

  final public String Button() throws ParseException {String content="";
    jj_consume_token(ST_BUTTON);
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STRING:{
        ;
        break;
        }
      default:
        jj_la1[22] = jj_gen;
        break label_17;
      }
      content = jj_consume_token(STRING).image;
    }
    jj_consume_token(ND_BUTTON);
System.out.print("Button - > "+content+'\n');
    {if ("" != null) return content;}
    throw new Error("Missing return statement in function");
  }

  final public String Header() throws ParseException {String content="no strings",Selected="H";
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ST_H1:{
      Selected = jj_consume_token(ST_H1).image;
      label_18:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case STRING:{
          ;
          break;
          }
        default:
          jj_la1[23] = jj_gen;
          break label_18;
        }
        content = jj_consume_token(STRING).image;
      }
      jj_consume_token(ND_H1);
      break;
      }
    case ST_H2:{
      Selected = jj_consume_token(ST_H2).image;
      label_19:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case STRING:{
          ;
          break;
          }
        default:
          jj_la1[24] = jj_gen;
          break label_19;
        }
        content = jj_consume_token(STRING).image;
      }
      jj_consume_token(ND_H2);
      break;
      }
    case ST_H3:{
      Selected = jj_consume_token(ST_H3).image;
      label_20:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case STRING:{
          ;
          break;
          }
        default:
          jj_la1[25] = jj_gen;
          break label_20;
        }
        content = jj_consume_token(STRING).image;
      }
      jj_consume_token(ND_H3);
      break;
      }
    case ST_H4:{
      Selected = jj_consume_token(ST_H4).image;
      label_21:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case STRING:{
          ;
          break;
          }
        default:
          jj_la1[26] = jj_gen;
          break label_21;
        }
        content = jj_consume_token(STRING).image;
      }
      jj_consume_token(ND_H4);
      break;
      }
    case ST_H5:{
      Selected = jj_consume_token(ST_H5).image;
      label_22:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case STRING:{
          ;
          break;
          }
        default:
          jj_la1[27] = jj_gen;
          break label_22;
        }
        content = jj_consume_token(STRING).image;
      }
      jj_consume_token(ND_H5);
      break;
      }
    case ST_H6:{
      Selected = jj_consume_token(ST_H6).image;
      label_23:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case STRING:{
          ;
          break;
          }
        default:
          jj_la1[28] = jj_gen;
          break label_23;
        }
        content = jj_consume_token(STRING).image;
      }
      jj_consume_token(ND_H6);
      break;
      }
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
System.out.print(Selected+" - > "+content+'\n');
    {if ("" != null) return content;}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public testTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[30];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x800,0x0,0x5542a200,0x5542a200,0x40000,0x100000,0x0,0x0,0x0,0x0,0x55002000,0x55002000,0x55002000,0x0,0x2000,0x2000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x55000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x800000,0x40000,0x40000,0x0,0x40000,0x44445,0x44445,0x0,0x0,0x40000,0x40000,0x40000,0x40000,0x44415,0x4415,0x44415,0x40000,0x40100,0x40100,0x40000,0x1000,0x40000,0x40000,0x40000,0x40000,0x40000,0x40000,0x40000,0x40000,0x5,};
   }

  /** Constructor with InputStream. */
  public test(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public test(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new testTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public test(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new testTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
      jj_input_stream = new SimpleCharStream(stream, 1, 1);
   } else {
      jj_input_stream.ReInit(stream, 1, 1);
   }
   if (token_source == null) {
      token_source = new testTokenManager(jj_input_stream);
   }

    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public test(testTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(testTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[58];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 30; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 58; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
