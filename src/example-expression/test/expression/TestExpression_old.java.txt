package test.expression;

import java.io.File;
import java.io.FileInputStream;
import java.io.ObjectInputStream;
import java.util.ArrayList;
import java.util.List;



import org.nfunk.jep.*;


/**
* A seven line program for testing whether the JEP library can be found
* by the compiler and at run-time.<br>
* Upon successful compilation and running of the program, the program should
* print out one line: "1+2 = 3.0"
*/
public class TestExpression_old {
	
	public static String expression = "1+2+";
	public static String parseName="expression";
	
	public static void main(String args[]) throws Exception{
		new TestExpression_old().start();
	}
	
	public void start()throws Exception{
		
//		String s="x^2 + 3 x + 4";
//		String s="1+21+ 3 + 4 + 3 + 4";
		String s="1+21";
		if(ExpressionConfig.SYMB_FLAG){
			char[] data;
			if(ExpressionConfig.TOKEN_SYMB){
//				System.out.println("JavaparserConfig.FLAG : "+JavaparserConfig.TOKEN_SYMB+"   "+JavaparserConfig.SYMB_FLAG);
				Debug.setInput(s, "6");
				data=s.toCharArray();
				for(int i=0;i<data.length;++i){
					System.out.print(""+(int)data[i]+", ");
				}
				System.out.println();
			}else{
				data=s.toCharArray();
				for(int i=0;i<s.length();i++){
					if(((char)data[i])!=' '){
						data[i]=Debug.makeConcolicChar("sym_cnf_char"+i, ""+(int)data[i]);
						System.out.print(""+(int)data[i]+", ");
					}
				}
				System.out.println();
				s = new String(data);
			}
			Debug.saveInput(s, parseName+".input");
		}
		System.out.println(s);
		
		System.out.println("-----------------------Start-------------");
		JEP myParser = new JEP();
		myParser.parseExpression(s);
		
		System.out.println(expression + " = " + myParser.getValue());
	}
	public static List<String> ReadFromFile() throws Exception{
		List<String> S_list= new ArrayList<String>();
		File file=new File(parseName+".input");    
		if(file.exists()){
//			S_list=FileUtils.readLines(file);		
			ObjectInputStream osi=new ObjectInputStream(new FileInputStream(file));
			S_list=(ArrayList<String>) osi.readObject();
			osi.close();
		}

		return S_list;
	}
}
