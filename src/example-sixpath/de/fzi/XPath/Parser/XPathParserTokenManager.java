/* Generated By:JavaCC: Do not edit this line. XPathParserTokenManager.java */
/*========================================================================*
 * The contents of this file are subject to the Mozilla Public License
 * Version 1.0 (the "License"); you may not use this file except in
 * compliance with the License.
 *
 * You may obtain a copy of the License at http://www.mozilla.org/MPL/
 * Software distributed under the License is distributed on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.
 * See the License for the specific language governing rights and
 * limitations under the License.
 *
 * The Original Code is all this file.
 *
 * The Initial Developer of the Original Code is
 * Aleksei Valikov, Forchungszentrum Informatik (valikov@fzi.de).
 *
 * Portions created by Ingo Macherius, Gerald Huck <{macherius, huck}@gmd.de>
 * are Copyright (C) 1999 GMD.
 * All Rights Reserved.
 *
 * Contributor(s): none.
 *========================================================================*/

package de.fzi.XPath.Parser;


public class XPathParserTokenManager implements XPathParserConstants
{
   private final int jjStopStringLiteralDfa_0(int pos, long active0)
   {
      switch (pos)
      {
         case 0:
            if ((active0 & 0x20000000L) != 0L)
            {
               jjmatchedKind = 34;
               return 30;
            }
            if ((active0 & 0x8000000L) != 0L)
            {
               jjmatchedKind = 34;
               return 123;
            }
            if ((active0 & 0x2000000L) != 0L)
            {
               jjmatchedKind = 34;
               return 70;
            }
            if ((active0 & 0x100000000L) != 0L)
            {
               jjmatchedKind = 34;
               return 39;
            }
            if ((active0 & 0x30000000000L) != 0L)
               return 11;
            if ((active0 & 0x55800000L) != 0L)
            {
               jjmatchedKind = 34;
               return 33;
            }
            if ((active0 & 0x80000000L) != 0L)
            {
               jjmatchedKind = 34;
               return 21;
            }
            return -1;
         case 1:
            if ((active0 & 0xfc000000L) != 0L)
            {
               jjmatchedKind = 34;
               jjmatchedPos = 1;
               return 33;
            }
            if ((active0 & 0x100000000L) != 0L)
            {
               jjmatchedKind = 34;
               jjmatchedPos = 1;
               return 46;
            }
            if ((active0 & 0x2000000L) != 0L)
            {
               jjmatchedKind = 34;
               jjmatchedPos = 1;
               return 69;
            }
            if ((active0 & 0x1800000L) != 0L)
               return 33;
            return -1;
         case 2:
            if ((active0 & 0x1e0000000L) != 0L)
            {
               jjmatchedKind = 34;
               jjmatchedPos = 2;
               return 33;
            }
            if ((active0 & 0x1e000000L) != 0L)
               return 33;
            return -1;
         case 3:
            if ((active0 & 0x60000000L) != 0L)
               return 33;
            if ((active0 & 0x180000000L) != 0L)
            {
               jjmatchedKind = 34;
               jjmatchedPos = 3;
               return 33;
            }
            return -1;
         case 4:
            if ((active0 & 0x180000000L) != 0L)
            {
               jjmatchedKind = 34;
               jjmatchedPos = 4;
               return 33;
            }
            return -1;
         case 5:
            if ((active0 & 0x180000000L) != 0L)
            {
               jjmatchedKind = 34;
               jjmatchedPos = 5;
               return 33;
            }
            return -1;
         case 6:
            if ((active0 & 0x80000000L) != 0L)
               return 33;
            if ((active0 & 0x100000000L) != 0L)
            {
               jjmatchedKind = 34;
               jjmatchedPos = 6;
               return 33;
            }
            return -1;
         case 7:
            if ((active0 & 0x100000000L) != 0L)
            {
               jjmatchedKind = 34;
               jjmatchedPos = 7;
               return 33;
            }
            return -1;
         case 8:
            if ((active0 & 0x100000000L) != 0L)
            {
               jjmatchedKind = 34;
               jjmatchedPos = 8;
               return 33;
            }
            return -1;
         case 9:
            if ((active0 & 0x100000000L) != 0L)
            {
               jjmatchedKind = 34;
               jjmatchedPos = 9;
               return 33;
            }
            return -1;
         case 10:
            if ((active0 & 0x100000000L) != 0L)
            {
               jjmatchedKind = 34;
               jjmatchedPos = 10;
               return 33;
            }
            return -1;
         case 11:
            if ((active0 & 0x100000000L) != 0L)
            {
               jjmatchedKind = 34;
               jjmatchedPos = 11;
               return 33;
            }
            return -1;
         case 12:
            if ((active0 & 0x100000000L) != 0L)
            {
               jjmatchedKind = 34;
               jjmatchedPos = 12;
               return 33;
            }
            return -1;
         case 13:
            if ((active0 & 0x100000000L) != 0L)
            {
               jjmatchedKind = 34;
               jjmatchedPos = 13;
               return 33;
            }
            return -1;
         case 14:
            if ((active0 & 0x100000000L) != 0L)
            {
               jjmatchedKind = 34;
               jjmatchedPos = 14;
               return 33;
            }
            return -1;
         case 15:
            if ((active0 & 0x100000000L) != 0L)
            {
               jjmatchedKind = 34;
               jjmatchedPos = 15;
               return 33;
            }
            return -1;
         case 16:
            if ((active0 & 0x100000000L) != 0L)
            {
               jjmatchedKind = 34;
               jjmatchedPos = 16;
               return 33;
            }
            return -1;
         case 17:
            if ((active0 & 0x100000000L) != 0L)
            {
               jjmatchedKind = 34;
               jjmatchedPos = 17;
               return 33;
            }
            return -1;
         case 18:
            if ((active0 & 0x100000000L) != 0L)
            {
               jjmatchedKind = 34;
               jjmatchedPos = 18;
               return 33;
            }
            return -1;
         case 19:
            if ((active0 & 0x100000000L) != 0L)
            {
               jjmatchedKind = 34;
               jjmatchedPos = 19;
               return 33;
            }
            return -1;
         case 20:
            if ((active0 & 0x100000000L) != 0L)
            {
               jjmatchedKind = 34;
               jjmatchedPos = 20;
               return 33;
            }
            return -1;
         default :
            return -1;
      }
   }
   private final int jjStartNfa_0(int pos, long active0)
   {
      return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
   }
   private final int jjStopAtPos(int pos, int kind)
   {
      jjmatchedKind = kind;
      jjmatchedPos = pos;
      return pos + 1;
   }
   private final int jjStartNfaWithStates_0(int pos, int kind, int state)
   {
      jjmatchedKind = kind;
      jjmatchedPos = pos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return pos + 1; }
      return jjMoveNfa_0(state, pos + 1);
   }
   private final int jjMoveStringLiteralDfa0_0()
   {
      switch(curChar)
      {
         case 33:
            return jjMoveStringLiteralDfa1_0(0x100L);
         case 36:
            return jjStopAtPos(0, 13);
         case 40:
            return jjStopAtPos(0, 36);
         case 41:
            return jjStopAtPos(0, 37);
         case 42:
            return jjStopAtPos(0, 44);
         case 43:
            return jjStopAtPos(0, 5);
         case 44:
            return jjStopAtPos(0, 38);
         case 45:
            return jjStopAtPos(0, 6);
         case 46:
            jjmatchedKind = 40;
            return jjMoveStringLiteralDfa1_0(0x20000000000L);
         case 47:
            jjmatchedKind = 2;
            return jjMoveStringLiteralDfa1_0(0x8L);
         case 58:
            return jjStopAtPos(0, 35);
         case 60:
            jjmatchedKind = 9;
            return jjMoveStringLiteralDfa1_0(0x400L);
         case 61:
            return jjStopAtPos(0, 7);
         case 62:
            jjmatchedKind = 11;
            return jjMoveStringLiteralDfa1_0(0x1000L);
         case 64:
            return jjStopAtPos(0, 39);
         case 91:
            return jjStopAtPos(0, 42);
         case 93:
            return jjStopAtPos(0, 43);
         case 97:
            return jjMoveStringLiteralDfa1_0(0x2000000L);
         case 99:
            return jjMoveStringLiteralDfa1_0(0x80000000L);
         case 100:
            return jjMoveStringLiteralDfa1_0(0x8000000L);
         case 105:
            return jjMoveStringLiteralDfa1_0(0x800000L);
         case 107:
            return jjMoveStringLiteralDfa1_0(0x10000000L);
         case 109:
            return jjMoveStringLiteralDfa1_0(0x4000000L);
         case 110:
            return jjMoveStringLiteralDfa1_0(0x20000000L);
         case 111:
            return jjMoveStringLiteralDfa1_0(0x1000000L);
         case 112:
            return jjMoveStringLiteralDfa1_0(0x100000000L);
         case 116:
            return jjMoveStringLiteralDfa1_0(0x40000000L);
         case 124:
            return jjStopAtPos(0, 4);
         default :
            return jjMoveNfa_0(1, 0);
      }
   }
   private final int jjMoveStringLiteralDfa1_0(long active0)
   {
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) {
         jjStopStringLiteralDfa_0(0, active0);
         return 1;
      }
      switch(curChar)
      {
         case 46:
            if ((active0 & 0x20000000000L) != 0L)
               return jjStopAtPos(1, 41);
            break;
         case 47:
            if ((active0 & 0x8L) != 0L)
               return jjStopAtPos(1, 3);
            break;
         case 61:
            if ((active0 & 0x100L) != 0L)
               return jjStopAtPos(1, 8);
            else if ((active0 & 0x400L) != 0L)
               return jjStopAtPos(1, 10);
            else if ((active0 & 0x1000L) != 0L)
               return jjStopAtPos(1, 12);
            break;
         case 100:
            if ((active0 & 0x800000L) != 0L)
               return jjStartNfaWithStates_0(1, 23, 33);
            break;
         case 101:
            return jjMoveStringLiteralDfa2_0(active0, 0x50000000L);
         case 105:
            return jjMoveStringLiteralDfa2_0(active0, 0x8000000L);
         case 110:
            return jjMoveStringLiteralDfa2_0(active0, 0x2000000L);
         case 111:
            return jjMoveStringLiteralDfa2_0(active0, 0xa4000000L);
         case 114:
            if ((active0 & 0x1000000L) != 0L)
               return jjStartNfaWithStates_0(1, 24, 33);
            return jjMoveStringLiteralDfa2_0(active0, 0x100000000L);
         default :
            break;
      }
      return jjStartNfa_0(0, active0);
   }
   private final int jjMoveStringLiteralDfa2_0(long old0, long active0)
   {
      if (((active0 &= old0)) == 0L)
         return jjStartNfa_0(0, old0);
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) {
         jjStopStringLiteralDfa_0(1, active0);
         return 2;
      }
      switch(curChar)
      {
         case 100:
            if ((active0 & 0x2000000L) != 0L)
               return jjStartNfaWithStates_0(2, 25, 33);
            else if ((active0 & 0x4000000L) != 0L)
               return jjStartNfaWithStates_0(2, 26, 33);
            return jjMoveStringLiteralDfa3_0(active0, 0x20000000L);
         case 109:
            return jjMoveStringLiteralDfa3_0(active0, 0x80000000L);
         case 111:
            return jjMoveStringLiteralDfa3_0(active0, 0x100000000L);
         case 118:
            if ((active0 & 0x8000000L) != 0L)
               return jjStartNfaWithStates_0(2, 27, 33);
            break;
         case 120:
            return jjMoveStringLiteralDfa3_0(active0, 0x40000000L);
         case 121:
            if ((active0 & 0x10000000L) != 0L)
               return jjStartNfaWithStates_0(2, 28, 33);
            break;
         default :
            break;
      }
      return jjStartNfa_0(1, active0);
   }
   private final int jjMoveStringLiteralDfa3_0(long old0, long active0)
   {
      if (((active0 &= old0)) == 0L)
         return jjStartNfa_0(1, old0);
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) {
         jjStopStringLiteralDfa_0(2, active0);
         return 3;
      }
      switch(curChar)
      {
         case 99:
            return jjMoveStringLiteralDfa4_0(active0, 0x100000000L);
         case 101:
            if ((active0 & 0x20000000L) != 0L)
               return jjStartNfaWithStates_0(3, 29, 33);
            break;
         case 109:
            return jjMoveStringLiteralDfa4_0(active0, 0x80000000L);
         case 116:
            if ((active0 & 0x40000000L) != 0L)
               return jjStartNfaWithStates_0(3, 30, 33);
            break;
         default :
            break;
      }
      return jjStartNfa_0(2, active0);
   }
   private final int jjMoveStringLiteralDfa4_0(long old0, long active0)
   {
      if (((active0 &= old0)) == 0L)
         return jjStartNfa_0(2, old0);
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) {
         jjStopStringLiteralDfa_0(3, active0);
         return 4;
      }
      switch(curChar)
      {
         case 101:
            return jjMoveStringLiteralDfa5_0(active0, 0x180000000L);
         default :
            break;
      }
      return jjStartNfa_0(3, active0);
   }
   private final int jjMoveStringLiteralDfa5_0(long old0, long active0)
   {
      if (((active0 &= old0)) == 0L)
         return jjStartNfa_0(3, old0);
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) {
         jjStopStringLiteralDfa_0(4, active0);
         return 5;
      }
      switch(curChar)
      {
         case 110:
            return jjMoveStringLiteralDfa6_0(active0, 0x80000000L);
         case 115:
            return jjMoveStringLiteralDfa6_0(active0, 0x100000000L);
         default :
            break;
      }
      return jjStartNfa_0(4, active0);
   }
   private final int jjMoveStringLiteralDfa6_0(long old0, long active0)
   {
      if (((active0 &= old0)) == 0L)
         return jjStartNfa_0(4, old0);
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) {
         jjStopStringLiteralDfa_0(5, active0);
         return 6;
      }
      switch(curChar)
      {
         case 115:
            return jjMoveStringLiteralDfa7_0(active0, 0x100000000L);
         case 116:
            if ((active0 & 0x80000000L) != 0L)
               return jjStartNfaWithStates_0(6, 31, 33);
            break;
         default :
            break;
      }
      return jjStartNfa_0(5, active0);
   }
   private final int jjMoveStringLiteralDfa7_0(long old0, long active0)
   {
      if (((active0 &= old0)) == 0L)
         return jjStartNfa_0(5, old0);
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) {
         jjStopStringLiteralDfa_0(6, active0);
         return 7;
      }
      switch(curChar)
      {
         case 105:
            return jjMoveStringLiteralDfa8_0(active0, 0x100000000L);
         default :
            break;
      }
      return jjStartNfa_0(6, active0);
   }
   private final int jjMoveStringLiteralDfa8_0(long old0, long active0)
   {
      if (((active0 &= old0)) == 0L)
         return jjStartNfa_0(6, old0);
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) {
         jjStopStringLiteralDfa_0(7, active0);
         return 8;
      }
      switch(curChar)
      {
         case 110:
            return jjMoveStringLiteralDfa9_0(active0, 0x100000000L);
         default :
            break;
      }
      return jjStartNfa_0(7, active0);
   }
   private final int jjMoveStringLiteralDfa9_0(long old0, long active0)
   {
      if (((active0 &= old0)) == 0L)
         return jjStartNfa_0(7, old0);
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) {
         jjStopStringLiteralDfa_0(8, active0);
         return 9;
      }
      switch(curChar)
      {
         case 103:
            return jjMoveStringLiteralDfa10_0(active0, 0x100000000L);
         default :
            break;
      }
      return jjStartNfa_0(8, active0);
   }
   private final int jjMoveStringLiteralDfa10_0(long old0, long active0)
   {
      if (((active0 &= old0)) == 0L)
         return jjStartNfa_0(8, old0);
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) {
         jjStopStringLiteralDfa_0(9, active0);
         return 10;
      }
      switch(curChar)
      {
         case 45:
            return jjMoveStringLiteralDfa11_0(active0, 0x100000000L);
         default :
            break;
      }
      return jjStartNfa_0(9, active0);
   }
   private final int jjMoveStringLiteralDfa11_0(long old0, long active0)
   {
      if (((active0 &= old0)) == 0L)
         return jjStartNfa_0(9, old0);
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) {
         jjStopStringLiteralDfa_0(10, active0);
         return 11;
      }
      switch(curChar)
      {
         case 105:
            return jjMoveStringLiteralDfa12_0(active0, 0x100000000L);
         default :
            break;
      }
      return jjStartNfa_0(10, active0);
   }
   private final int jjMoveStringLiteralDfa12_0(long old0, long active0)
   {
      if (((active0 &= old0)) == 0L)
         return jjStartNfa_0(10, old0);
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) {
         jjStopStringLiteralDfa_0(11, active0);
         return 12;
      }
      switch(curChar)
      {
         case 110:
            return jjMoveStringLiteralDfa13_0(active0, 0x100000000L);
         default :
            break;
      }
      return jjStartNfa_0(11, active0);
   }
   private final int jjMoveStringLiteralDfa13_0(long old0, long active0)
   {
      if (((active0 &= old0)) == 0L)
         return jjStartNfa_0(11, old0);
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) {
         jjStopStringLiteralDfa_0(12, active0);
         return 13;
      }
      switch(curChar)
      {
         case 115:
            return jjMoveStringLiteralDfa14_0(active0, 0x100000000L);
         default :
            break;
      }
      return jjStartNfa_0(12, active0);
   }
   private final int jjMoveStringLiteralDfa14_0(long old0, long active0)
   {
      if (((active0 &= old0)) == 0L)
         return jjStartNfa_0(12, old0);
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) {
         jjStopStringLiteralDfa_0(13, active0);
         return 14;
      }
      switch(curChar)
      {
         case 116:
            return jjMoveStringLiteralDfa15_0(active0, 0x100000000L);
         default :
            break;
      }
      return jjStartNfa_0(13, active0);
   }
   private final int jjMoveStringLiteralDfa15_0(long old0, long active0)
   {
      if (((active0 &= old0)) == 0L)
         return jjStartNfa_0(13, old0);
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) {
         jjStopStringLiteralDfa_0(14, active0);
         return 15;
      }
      switch(curChar)
      {
         case 114:
            return jjMoveStringLiteralDfa16_0(active0, 0x100000000L);
         default :
            break;
      }
      return jjStartNfa_0(14, active0);
   }
   private final int jjMoveStringLiteralDfa16_0(long old0, long active0)
   {
      if (((active0 &= old0)) == 0L)
         return jjStartNfa_0(14, old0);
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) {
         jjStopStringLiteralDfa_0(15, active0);
         return 16;
      }
      switch(curChar)
      {
         case 117:
            return jjMoveStringLiteralDfa17_0(active0, 0x100000000L);
         default :
            break;
      }
      return jjStartNfa_0(15, active0);
   }
   private final int jjMoveStringLiteralDfa17_0(long old0, long active0)
   {
      if (((active0 &= old0)) == 0L)
         return jjStartNfa_0(15, old0);
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) {
         jjStopStringLiteralDfa_0(16, active0);
         return 17;
      }
      switch(curChar)
      {
         case 99:
            return jjMoveStringLiteralDfa18_0(active0, 0x100000000L);
         default :
            break;
      }
      return jjStartNfa_0(16, active0);
   }
   private final int jjMoveStringLiteralDfa18_0(long old0, long active0)
   {
      if (((active0 &= old0)) == 0L)
         return jjStartNfa_0(16, old0);
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) {
         jjStopStringLiteralDfa_0(17, active0);
         return 18;
      }
      switch(curChar)
      {
         case 116:
            return jjMoveStringLiteralDfa19_0(active0, 0x100000000L);
         default :
            break;
      }
      return jjStartNfa_0(17, active0);
   }
   private final int jjMoveStringLiteralDfa19_0(long old0, long active0)
   {
      if (((active0 &= old0)) == 0L)
         return jjStartNfa_0(17, old0);
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) {
         jjStopStringLiteralDfa_0(18, active0);
         return 19;
      }
      switch(curChar)
      {
         case 105:
            return jjMoveStringLiteralDfa20_0(active0, 0x100000000L);
         default :
            break;
      }
      return jjStartNfa_0(18, active0);
   }
   private final int jjMoveStringLiteralDfa20_0(long old0, long active0)
   {
      if (((active0 &= old0)) == 0L)
         return jjStartNfa_0(18, old0);
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) {
         jjStopStringLiteralDfa_0(19, active0);
         return 20;
      }
      switch(curChar)
      {
         case 111:
            return jjMoveStringLiteralDfa21_0(active0, 0x100000000L);
         default :
            break;
      }
      return jjStartNfa_0(19, active0);
   }
   private final int jjMoveStringLiteralDfa21_0(long old0, long active0)
   {
      if (((active0 &= old0)) == 0L)
         return jjStartNfa_0(19, old0);
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) {
         jjStopStringLiteralDfa_0(20, active0);
         return 21;
      }
      switch(curChar)
      {
         case 110:
            if ((active0 & 0x100000000L) != 0L)
               return jjStartNfaWithStates_0(21, 32, 33);
            break;
         default :
            break;
      }
      return jjStartNfa_0(20, active0);
   }
   private final void jjCheckNAdd(int state)
   {
      if (jjrounds[state] != jjround)
      {
         jjstateSet[jjnewStateCnt++] = state;
         jjrounds[state] = jjround;
      }
   }
   private final void jjAddStates(int start, int end)
   {
      do {
         jjstateSet[jjnewStateCnt++] = jjnextStates[start];
      } while (start++ != end);
   }
   private final void jjCheckNAddTwoStates(int state1, int state2)
   {
      jjCheckNAdd(state1);
      jjCheckNAdd(state2);
   }
   private final void jjCheckNAddStates(int start, int end)
   {
      do {
         jjCheckNAdd(jjnextStates[start]);
      } while (start++ != end);
   }
   private final void jjCheckNAddStates(int start)
   {
      jjCheckNAdd(jjnextStates[start]);
      jjCheckNAdd(jjnextStates[start + 1]);
   }
   static final long[] jjbitVec0 = {
           0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
   };
   static final long[] jjbitVec2 = {
           0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
   };
   static final long[] jjbitVec3 = {
           0x0L, 0xffffffffffffc000L, 0xfffff0007fffffffL, 0x7fffffL
   };
   static final long[] jjbitVec4 = {
           0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
   };
   static final long[] jjbitVec5 = {
           0x7ff3ffffffffffffL, 0x7ffffffffffffdfeL, 0xffffffffffffffffL, 0xfc31ffffffffe00fL
   };
   static final long[] jjbitVec6 = {
           0xffffffL, 0xffffffffffff0000L, 0xf80001ffffffffffL, 0x3L
   };
   static final long[] jjbitVec7 = {
           0x0L, 0x0L, 0xfffffffbffffd740L, 0xffffd547f7fffL
   };
   static final long[] jjbitVec8 = {
           0xffffffffffffdffeL, 0xffffffffdffeffffL, 0xffffffffffff0003L, 0x33fcfffffff199fL
   };
   static final long[] jjbitVec9 = {
           0xfffe000000000000L, 0xfffffffe027fffffL, 0x7fL, 0x707ffffff0000L
   };
   static final long[] jjbitVec10 = {
           0x7fffffe00000000L, 0xfffe0000000007feL, 0x7cffffffffffffffL, 0x60002f7fffL
   };
   static final long[] jjbitVec11 = {
           0x23ffffffffffffe0L, 0x3ff000000L, 0x3c5fdfffff99fe0L, 0x30003b0000000L
   };
   static final long[] jjbitVec12 = {
           0x36dfdfffff987e0L, 0x1c00005e000000L, 0x23edfdfffffbafe0L, 0x100000000L
   };
   static final long[] jjbitVec13 = {
           0x23cdfdfffff99fe0L, 0x3b0000000L, 0x3bfc718d63dc7e0L, 0x0L
   };
   static final long[] jjbitVec14 = {
           0x3effdfffffddfe0L, 0x300000000L, 0x3effdfffffddfe0L, 0x340000000L
   };
   static final long[] jjbitVec15 = {
           0x3fffdfffffddfe0L, 0x300000000L, 0x0L, 0x0L
   };
   static final long[] jjbitVec16 = {
           0xd7ffffffffffeL, 0x3fL, 0x200d6caefef02596L, 0x1fL
   };
   static final long[] jjbitVec17 = {
           0x0L, 0x3fffffffeffL, 0x0L, 0x0L
   };
   static final long[] jjbitVec18 = {
           0x0L, 0x0L, 0xffffffff00000000L, 0x7fffffffff003fL
   };
   static final long[] jjbitVec19 = {
           0x500000000007daedL, 0x2c62ab82315001L, 0xf580c90040000000L, 0x201080000000007L
   };
   static final long[] jjbitVec20 = {
           0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffff0fffffffL, 0x3ffffffffffffffL
   };
   static final long[] jjbitVec21 = {
           0xffffffff3f3fffffL, 0x3fffffffaaff3f3fL, 0x5fdfffffffffffffL, 0x1fdc1fff0fcf1fdcL
   };
   static final long[] jjbitVec22 = {
           0x4c4000000000L, 0x0L, 0x7L, 0x0L
   };
   static final long[] jjbitVec23 = {
           0x3fe00000080L, 0xfffffffffffffffeL, 0xfffffffe001fffffL, 0x7ffffffffffffffL
   };
   static final long[] jjbitVec24 = {
           0x1fffffffffe0L, 0x0L, 0x0L, 0x0L
   };
   static final long[] jjbitVec25 = {
           0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffL, 0x0L
   };
   static final long[] jjbitVec26 = {
           0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffL, 0x0L
   };
   static final long[] jjbitVec27 = {
           0x0L, 0x0L, 0x80000000000000L, 0xff7fffffff7fffffL
   };
   static final long[] jjbitVec28 = {
           0xffffffL, 0xffffffffffff0000L, 0xf80001ffffffffffL, 0x30003L
   };
   static final long[] jjbitVec29 = {
           0xffffffffffffffffL, 0x30000003fL, 0xfffffffbffffd7c0L, 0xffffd547f7fffL
   };
   static final long[] jjbitVec30 = {
           0xffffffffffffdffeL, 0xffffffffdffeffffL, 0xffffffffffff007bL, 0x33fcfffffff199fL
   };
   static final long[] jjbitVec31 = {
           0xfffe000000000000L, 0xfffffffe027fffffL, 0xbbfffffbfffe007fL, 0x707ffffff0016L
   };
   static final long[] jjbitVec32 = {
           0x7fffffe00000000L, 0xffff03ff0007ffffL, 0x7cffffffffffffffL, 0x3ff3dffffef7fffL
   };
   static final long[] jjbitVec33 = {
           0xf3ffffffffffffeeL, 0xffcfff1e3fffL, 0xd3c5fdfffff99feeL, 0x3ffcfb080399fL
   };
   static final long[] jjbitVec34 = {
           0xd36dfdfffff987e4L, 0x1fffc05e003987L, 0xf3edfdfffffbafeeL, 0xffc100003bbfL
   };
   static final long[] jjbitVec35 = {
           0xf3cdfdfffff99feeL, 0xffc3b0c0398fL, 0xc3bfc718d63dc7ecL, 0xff8000803dc7L
   };
   static final long[] jjbitVec36 = {
           0xc3effdfffffddfeeL, 0xffc300603ddfL, 0xc3effdfffffddfecL, 0xffc340603ddfL
   };
   static final long[] jjbitVec37 = {
           0xc3fffdfffffddfecL, 0xffc300803dcfL, 0x0L, 0x0L
   };
   static final long[] jjbitVec38 = {
           0x7ff7ffffffffffeL, 0x3ff7fffL, 0x3bff6caefef02596L, 0x3ff3f5fL
   };
   static final long[] jjbitVec39 = {
           0xc2a003ff03000000L, 0xfffe03fffffffeffL, 0x2fe3ffffebf0fdfL, 0x0L
   };
   static final long[] jjbitVec40 = {
           0x0L, 0x0L, 0x0L, 0x21fff0000L
   };
   static final long[] jjbitVec41 = {
           0x3efffe000000a0L, 0xfffffffffffffffeL, 0xfffffffe661fffffL, 0x77ffffffffffffffL
   };
   private final int jjMoveNfa_0(int startState, int curPos)
   {
      int[] nextStates;
      int startsAt = 0;
      jjnewStateCnt = 140;
      int i = 1;
      jjstateSet[0] = startState;
      int j, kind = 0x7fffffff;
      for (;;)
      {
         if (++jjround == 0x7fffffff)
            ReInitRounds();
         if (curChar < 64)
         {
            long l = 1L << curChar;
            MatchLoop: do
            {
               switch(jjstateSet[--i])
               {
                  case 21:
                  case 33:
                     if ((0x3ff600000000000L & l) == 0L)
                        break;
                     if (kind > 34)
                        kind = 34;
                     jjCheckNAdd(33);
                     break;
                  case 39:
                     if ((0x3ff600000000000L & l) == 0L)
                        break;
                     if (kind > 34)
                        kind = 34;
                     jjCheckNAdd(33);
                     break;
                  case 30:
                     if ((0x3ff600000000000L & l) == 0L)
                        break;
                     if (kind > 34)
                        kind = 34;
                     jjCheckNAdd(33);
                     break;
                  case 70:
                     if ((0x3ff600000000000L & l) == 0L)
                        break;
                     if (kind > 34)
                        kind = 34;
                     jjCheckNAdd(33);
                     break;
                  case 123:
                     if ((0x3ff600000000000L & l) == 0L)
                        break;
                     if (kind > 34)
                        kind = 34;
                     jjCheckNAdd(33);
                     break;
                  case 46:
                     if ((0x3ff600000000000L & l) == 0L)
                        break;
                     if (kind > 34)
                        kind = 34;
                     jjCheckNAdd(33);
                     break;
                  case 69:
                     if ((0x3ff600000000000L & l) == 0L)
                        break;
                     if (kind > 34)
                        kind = 34;
                     jjCheckNAdd(33);
                     break;
                  case 1:
                     if ((0x3ff000000000000L & l) != 0L)
                     {
                        if (kind > 16)
                           kind = 16;
                        jjCheckNAddTwoStates(7, 8);
                     }
                     else if ((0x100002600L & l) != 0L)
                     {
                        if (kind > 1)
                           kind = 1;
                        jjCheckNAdd(0);
                     }
                     else if (curChar == 46)
                        jjCheckNAdd(11);
                     else if (curChar == 39)
                        jjCheckNAddTwoStates(5, 6);
                     else if (curChar == 34)
                        jjCheckNAddTwoStates(2, 3);
                     break;
                  case 0:
                     if ((0x100002600L & l) == 0L)
                        break;
                     if (kind > 1)
                        kind = 1;
                     jjCheckNAdd(0);
                     break;
                  case 2:
                     if ((0xfffffffbffffffffL & l) != 0L)
                        jjCheckNAddTwoStates(2, 3);
                     break;
                  case 3:
                     if (curChar == 34 && kind > 14)
                        kind = 14;
                     break;
                  case 4:
                     if (curChar == 39)
                        jjCheckNAddTwoStates(5, 6);
                     break;
                  case 5:
                     if ((0xffffff7fffffffffL & l) != 0L)
                        jjCheckNAddTwoStates(5, 6);
                     break;
                  case 6:
                     if (curChar == 39 && kind > 14)
                        kind = 14;
                     break;
                  case 7:
                     if ((0x3ff000000000000L & l) == 0L)
                        break;
                     if (kind > 16)
                        kind = 16;
                     jjCheckNAddTwoStates(7, 8);
                     break;
                  case 8:
                     if (curChar != 46)
                        break;
                     if (kind > 16)
                        kind = 16;
                     jjCheckNAdd(9);
                     break;
                  case 9:
                     if ((0x3ff000000000000L & l) == 0L)
                        break;
                     if (kind > 16)
                        kind = 16;
                     jjCheckNAdd(9);
                     break;
                  case 10:
                     if (curChar == 46)
                        jjCheckNAdd(11);
                     break;
                  case 11:
                     if ((0x3ff000000000000L & l) == 0L)
                        break;
                     if (kind > 16)
                        kind = 16;
                     jjCheckNAdd(11);
                     break;
                  case 13:
                     if (curChar == 58 && kind > 33)
                        kind = 33;
                     break;
                  case 14:
                     if (curChar == 58)
                        jjstateSet[jjnewStateCnt++] = 13;
                     break;
                  case 54:
                     if (curChar == 45)
                        jjstateSet[jjnewStateCnt++] = 53;
                     break;
                  case 81:
                     if (curChar == 45)
                        jjstateSet[jjnewStateCnt++] = 80;
                     break;
                  case 84:
                     if (curChar == 45)
                        jjstateSet[jjnewStateCnt++] = 83;
                     break;
                  case 106:
                     if (curChar == 45)
                        jjstateSet[jjnewStateCnt++] = 105;
                     break;
                  case 127:
                     if (curChar == 45)
                        jjstateSet[jjnewStateCnt++] = 126;
                     break;
                  case 130:
                     if (curChar == 45)
                        jjstateSet[jjnewStateCnt++] = 129;
                     break;
                  default : break;
               }
            } while(i != startsAt);
         }
         else if (curChar < 128)
         {
            long l = 1L << (curChar & 077);
            MatchLoop: do
            {
               switch(jjstateSet[--i])
               {
                  case 21:
                     if ((0x7fffffe87fffffeL & l) != 0L)
                     {
                        if (kind > 34)
                           kind = 34;
                        jjCheckNAdd(33);
                     }
                     if (curChar == 104)
                        jjstateSet[jjnewStateCnt++] = 20;
                     break;
                  case 39:
                     if ((0x7fffffe87fffffeL & l) != 0L)
                     {
                        if (kind > 34)
                           kind = 34;
                        jjCheckNAdd(33);
                     }
                     if (curChar == 114)
                        jjstateSet[jjnewStateCnt++] = 61;
                     else if (curChar == 97)
                        jjstateSet[jjnewStateCnt++] = 38;
                     if (curChar == 114)
                        jjstateSet[jjnewStateCnt++] = 46;
                     break;
                  case 30:
                     if ((0x7fffffe87fffffeL & l) != 0L)
                     {
                        if (kind > 34)
                           kind = 34;
                        jjCheckNAdd(33);
                     }
                     if (curChar == 97)
                        jjstateSet[jjnewStateCnt++] = 29;
                     break;
                  case 70:
                     if ((0x7fffffe87fffffeL & l) != 0L)
                     {
                        if (kind > 34)
                           kind = 34;
                        jjCheckNAdd(33);
                     }
                     if (curChar == 110)
                        jjstateSet[jjnewStateCnt++] = 90;
                     else if (curChar == 116)
                        jjstateSet[jjnewStateCnt++] = 76;
                     if (curChar == 110)
                        jjstateSet[jjnewStateCnt++] = 69;
                     break;
                  case 123:
                     if ((0x7fffffe87fffffeL & l) != 0L)
                     {
                        if (kind > 34)
                           kind = 34;
                        jjCheckNAdd(33);
                     }
                     if (curChar == 101)
                        jjstateSet[jjnewStateCnt++] = 138;
                     if (curChar == 101)
                        jjstateSet[jjnewStateCnt++] = 122;
                     break;
                  case 46:
                     if ((0x7fffffe87fffffeL & l) != 0L)
                     {
                        if (kind > 34)
                           kind = 34;
                        jjCheckNAdd(33);
                     }
                     if (curChar == 101)
                        jjstateSet[jjnewStateCnt++] = 60;
                     if (curChar == 101)
                        jjstateSet[jjnewStateCnt++] = 45;
                     break;
                  case 69:
                     if ((0x7fffffe87fffffeL & l) != 0L)
                     {
                        if (kind > 34)
                           kind = 34;
                        jjCheckNAdd(33);
                     }
                     if (curChar == 99)
                        jjstateSet[jjnewStateCnt++] = 89;
                     if (curChar == 99)
                        jjstateSet[jjnewStateCnt++] = 68;
                     break;
                  case 1:
                     if ((0x7fffffe87fffffeL & l) != 0L)
                     {
                        if (kind > 34)
                           kind = 34;
                        jjCheckNAdd(33);
                     }
                     if (curChar == 100)
                        jjAddStates(0, 1);
                     else if (curChar == 102)
                        jjAddStates(2, 3);
                     else if (curChar == 97)
                        jjAddStates(4, 6);
                     else if (curChar == 112)
                        jjAddStates(7, 9);
                     else if (curChar == 110)
                        jjstateSet[jjnewStateCnt++] = 30;
                     else if (curChar == 99)
                        jjstateSet[jjnewStateCnt++] = 21;
                     else if (curChar == 115)
                        jjstateSet[jjnewStateCnt++] = 16;
                     break;
                  case 2:
                     jjAddStates(10, 11);
                     break;
                  case 5:
                     jjAddStates(12, 13);
                     break;
                  case 12:
                     if (curChar == 102)
                        jjCheckNAdd(14);
                     break;
                  case 15:
                  case 78:
                  case 124:
                     if (curChar == 108)
                        jjCheckNAdd(12);
                     break;
                  case 16:
                     if (curChar == 101)
                        jjstateSet[jjnewStateCnt++] = 15;
                     break;
                  case 17:
                     if (curChar == 115)
                        jjstateSet[jjnewStateCnt++] = 16;
                     break;
                  case 18:
                     if (curChar == 100)
                        jjCheckNAdd(14);
                     break;
                  case 19:
                     if (curChar == 108)
                        jjstateSet[jjnewStateCnt++] = 18;
                     break;
                  case 20:
                     if (curChar == 105)
                        jjstateSet[jjnewStateCnt++] = 19;
                     break;
                  case 22:
                     if (curChar == 99)
                        jjstateSet[jjnewStateCnt++] = 21;
                     break;
                  case 23:
                     if (curChar == 101)
                        jjCheckNAdd(14);
                     break;
                  case 24:
                     if (curChar == 99)
                        jjCheckNAdd(23);
                     break;
                  case 25:
                     if (curChar == 97)
                        jjstateSet[jjnewStateCnt++] = 24;
                     break;
                  case 26:
                     if (curChar == 112)
                        jjstateSet[jjnewStateCnt++] = 25;
                     break;
                  case 27:
                     if (curChar == 115)
                        jjstateSet[jjnewStateCnt++] = 26;
                     break;
                  case 28:
                     if (curChar == 101)
                        jjstateSet[jjnewStateCnt++] = 27;
                     break;
                  case 29:
                     if (curChar == 109)
                        jjstateSet[jjnewStateCnt++] = 28;
                     break;
                  case 31:
                     if (curChar == 110)
                        jjstateSet[jjnewStateCnt++] = 30;
                     break;
                  case 32:
                     if ((0x7fffffe87fffffeL & l) == 0L)
                        break;
                     if (kind > 34)
                        kind = 34;
                     jjCheckNAdd(33);
                     break;
                  case 33:
                     if ((0x7fffffe87fffffeL & l) == 0L)
                        break;
                     if (kind > 34)
                        kind = 34;
                     jjCheckNAdd(33);
                     break;
                  case 34:
                     if (curChar == 112)
                        jjAddStates(7, 9);
                     break;
                  case 35:
                     if (curChar == 116)
                        jjCheckNAdd(14);
                     break;
                  case 36:
                  case 116:
                     if (curChar == 110)
                        jjCheckNAdd(35);
                     break;
                  case 37:
                     if (curChar == 101)
                        jjstateSet[jjnewStateCnt++] = 36;
                     break;
                  case 38:
                     if (curChar == 114)
                        jjstateSet[jjnewStateCnt++] = 37;
                     break;
                  case 40:
                     if (curChar == 103)
                        jjCheckNAdd(14);
                     break;
                  case 41:
                  case 48:
                  case 93:
                  case 100:
                     if (curChar == 110)
                        jjCheckNAdd(40);
                     break;
                  case 42:
                     if (curChar == 105)
                        jjstateSet[jjnewStateCnt++] = 41;
                     break;
                  case 43:
                     if (curChar == 100)
                        jjstateSet[jjnewStateCnt++] = 42;
                     break;
                  case 44:
                     if (curChar == 101)
                        jjstateSet[jjnewStateCnt++] = 43;
                     break;
                  case 45:
                     if (curChar == 99)
                        jjstateSet[jjnewStateCnt++] = 44;
                     break;
                  case 47:
                     if (curChar == 114)
                        jjstateSet[jjnewStateCnt++] = 46;
                     break;
                  case 49:
                     if (curChar == 105)
                        jjstateSet[jjnewStateCnt++] = 48;
                     break;
                  case 50:
                     if (curChar == 108)
                        jjstateSet[jjnewStateCnt++] = 49;
                     break;
                  case 51:
                     if (curChar == 98)
                        jjstateSet[jjnewStateCnt++] = 50;
                     break;
                  case 52:
                     if (curChar == 105)
                        jjstateSet[jjnewStateCnt++] = 51;
                     break;
                  case 53:
                     if (curChar == 115)
                        jjstateSet[jjnewStateCnt++] = 52;
                     break;
                  case 55:
                     if (curChar == 103)
                        jjstateSet[jjnewStateCnt++] = 54;
                     break;
                  case 56:
                     if (curChar == 110)
                        jjstateSet[jjnewStateCnt++] = 55;
                     break;
                  case 57:
                     if (curChar == 105)
                        jjstateSet[jjnewStateCnt++] = 56;
                     break;
                  case 58:
                     if (curChar == 100)
                        jjstateSet[jjnewStateCnt++] = 57;
                     break;
                  case 59:
                     if (curChar == 101)
                        jjstateSet[jjnewStateCnt++] = 58;
                     break;
                  case 60:
                     if (curChar == 99)
                        jjstateSet[jjnewStateCnt++] = 59;
                     break;
                  case 61:
                     if (curChar == 101)
                        jjstateSet[jjnewStateCnt++] = 60;
                     break;
                  case 62:
                     if (curChar == 114)
                        jjstateSet[jjnewStateCnt++] = 61;
                     break;
                  case 63:
                     if (curChar == 97)
                        jjAddStates(4, 6);
                     break;
                  case 64:
                     if (curChar == 114)
                        jjCheckNAdd(14);
                     break;
                  case 65:
                     if (curChar == 111)
                        jjstateSet[jjnewStateCnt++] = 64;
                     break;
                  case 66:
                     if (curChar == 116)
                        jjstateSet[jjnewStateCnt++] = 65;
                     break;
                  case 67:
                     if (curChar == 115)
                        jjstateSet[jjnewStateCnt++] = 66;
                     break;
                  case 68:
                     if (curChar == 101)
                        jjstateSet[jjnewStateCnt++] = 67;
                     break;
                  case 71:
                     if (curChar == 116)
                        jjCheckNAdd(23);
                     break;
                  case 72:
                     if (curChar == 117)
                        jjstateSet[jjnewStateCnt++] = 71;
                     break;
                  case 73:
                     if (curChar == 98)
                        jjstateSet[jjnewStateCnt++] = 72;
                     break;
                  case 74:
                     if (curChar == 105)
                        jjstateSet[jjnewStateCnt++] = 73;
                     break;
                  case 75:
                     if (curChar == 114)
                        jjstateSet[jjnewStateCnt++] = 74;
                     break;
                  case 76:
                     if (curChar == 116)
                        jjstateSet[jjnewStateCnt++] = 75;
                     break;
                  case 77:
                     if (curChar == 116)
                        jjstateSet[jjnewStateCnt++] = 76;
                     break;
                  case 79:
                     if (curChar == 101)
                        jjstateSet[jjnewStateCnt++] = 78;
                     break;
                  case 80:
                     if (curChar == 115)
                        jjstateSet[jjnewStateCnt++] = 79;
                     break;
                  case 82:
                     if (curChar == 114)
                        jjstateSet[jjnewStateCnt++] = 81;
                     break;
                  case 83:
                     if (curChar == 111)
                        jjstateSet[jjnewStateCnt++] = 82;
                     break;
                  case 85:
                     if (curChar == 114)
                        jjstateSet[jjnewStateCnt++] = 84;
                     break;
                  case 86:
                     if (curChar == 111)
                        jjstateSet[jjnewStateCnt++] = 85;
                     break;
                  case 87:
                     if (curChar == 116)
                        jjstateSet[jjnewStateCnt++] = 86;
                     break;
                  case 88:
                     if (curChar == 115)
                        jjstateSet[jjnewStateCnt++] = 87;
                     break;
                  case 89:
                     if (curChar == 101)
                        jjstateSet[jjnewStateCnt++] = 88;
                     break;
                  case 90:
                     if (curChar == 99)
                        jjstateSet[jjnewStateCnt++] = 89;
                     break;
                  case 91:
                     if (curChar == 110)
                        jjstateSet[jjnewStateCnt++] = 90;
                     break;
                  case 92:
                     if (curChar == 102)
                        jjAddStates(2, 3);
                     break;
                  case 94:
                     if (curChar == 105)
                        jjstateSet[jjnewStateCnt++] = 93;
                     break;
                  case 95:
                     if (curChar == 119)
                        jjstateSet[jjnewStateCnt++] = 94;
                     break;
                  case 96:
                     if (curChar == 111)
                        jjstateSet[jjnewStateCnt++] = 95;
                     break;
                  case 97:
                     if (curChar == 108)
                        jjstateSet[jjnewStateCnt++] = 96;
                     break;
                  case 98:
                     if (curChar == 108)
                        jjstateSet[jjnewStateCnt++] = 97;
                     break;
                  case 99:
                     if (curChar == 111)
                        jjstateSet[jjnewStateCnt++] = 98;
                     break;
                  case 101:
                     if (curChar == 105)
                        jjstateSet[jjnewStateCnt++] = 100;
                     break;
                  case 102:
                     if (curChar == 108)
                        jjstateSet[jjnewStateCnt++] = 101;
                     break;
                  case 103:
                     if (curChar == 98)
                        jjstateSet[jjnewStateCnt++] = 102;
                     break;
                  case 104:
                     if (curChar == 105)
                        jjstateSet[jjnewStateCnt++] = 103;
                     break;
                  case 105:
                     if (curChar == 115)
                        jjstateSet[jjnewStateCnt++] = 104;
                     break;
                  case 107:
                     if (curChar == 103)
                        jjstateSet[jjnewStateCnt++] = 106;
                     break;
                  case 108:
                     if (curChar == 110)
                        jjstateSet[jjnewStateCnt++] = 107;
                     break;
                  case 109:
                     if (curChar == 105)
                        jjstateSet[jjnewStateCnt++] = 108;
                     break;
                  case 110:
                     if (curChar == 119)
                        jjstateSet[jjnewStateCnt++] = 109;
                     break;
                  case 111:
                     if (curChar == 111)
                        jjstateSet[jjnewStateCnt++] = 110;
                     break;
                  case 112:
                     if (curChar == 108)
                        jjstateSet[jjnewStateCnt++] = 111;
                     break;
                  case 113:
                     if (curChar == 108)
                        jjstateSet[jjnewStateCnt++] = 112;
                     break;
                  case 114:
                     if (curChar == 111)
                        jjstateSet[jjnewStateCnt++] = 113;
                     break;
                  case 115:
                     if (curChar == 100)
                        jjAddStates(0, 1);
                     break;
                  case 117:
                     if (curChar == 97)
                        jjstateSet[jjnewStateCnt++] = 116;
                     break;
                  case 118:
                     if (curChar == 100)
                        jjstateSet[jjnewStateCnt++] = 117;
                     break;
                  case 119:
                     if (curChar == 110)
                        jjstateSet[jjnewStateCnt++] = 118;
                     break;
                  case 120:
                     if (curChar == 101)
                        jjstateSet[jjnewStateCnt++] = 119;
                     break;
                  case 121:
                     if (curChar == 99)
                        jjstateSet[jjnewStateCnt++] = 120;
                     break;
                  case 122:
                     if (curChar == 115)
                        jjstateSet[jjnewStateCnt++] = 121;
                     break;
                  case 125:
                     if (curChar == 101)
                        jjstateSet[jjnewStateCnt++] = 124;
                     break;
                  case 126:
                     if (curChar == 115)
                        jjstateSet[jjnewStateCnt++] = 125;
                     break;
                  case 128:
                     if (curChar == 114)
                        jjstateSet[jjnewStateCnt++] = 127;
                     break;
                  case 129:
                     if (curChar == 111)
                        jjstateSet[jjnewStateCnt++] = 128;
                     break;
                  case 131:
                     if (curChar == 116)
                        jjstateSet[jjnewStateCnt++] = 130;
                     break;
                  case 132:
                     if (curChar == 110)
                        jjstateSet[jjnewStateCnt++] = 131;
                     break;
                  case 133:
                     if (curChar == 97)
                        jjstateSet[jjnewStateCnt++] = 132;
                     break;
                  case 134:
                     if (curChar == 100)
                        jjstateSet[jjnewStateCnt++] = 133;
                     break;
                  case 135:
                     if (curChar == 110)
                        jjstateSet[jjnewStateCnt++] = 134;
                     break;
                  case 136:
                     if (curChar == 101)
                        jjstateSet[jjnewStateCnt++] = 135;
                     break;
                  case 137:
                     if (curChar == 99)
                        jjstateSet[jjnewStateCnt++] = 136;
                     break;
                  case 138:
                     if (curChar == 115)
                        jjstateSet[jjnewStateCnt++] = 137;
                     break;
                  case 139:
                     if (curChar == 101)
                        jjstateSet[jjnewStateCnt++] = 138;
                     break;
                  default : break;
               }
            } while(i != startsAt);
         }
         else
         {
            int hiByte = (int)(curChar >> 8);
            int i1 = hiByte >> 6;
            long l1 = 1L << (hiByte & 077);
            int i2 = (curChar & 0xff) >> 6;
            long l2 = 1L << (curChar & 077);
            MatchLoop: do
            {
               switch(jjstateSet[--i])
               {
                  case 21:
                  case 33:
                     if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                        break;
                     if (kind > 34)
                        kind = 34;
                     jjCheckNAdd(33);
                     break;
                  case 39:
                     if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                        break;
                     if (kind > 34)
                        kind = 34;
                     jjCheckNAdd(33);
                     break;
                  case 30:
                     if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                        break;
                     if (kind > 34)
                        kind = 34;
                     jjCheckNAdd(33);
                     break;
                  case 70:
                     if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                        break;
                     if (kind > 34)
                        kind = 34;
                     jjCheckNAdd(33);
                     break;
                  case 123:
                     if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                        break;
                     if (kind > 34)
                        kind = 34;
                     jjCheckNAdd(33);
                     break;
                  case 46:
                     if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                        break;
                     if (kind > 34)
                        kind = 34;
                     jjCheckNAdd(33);
                     break;
                  case 69:
                     if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                        break;
                     if (kind > 34)
                        kind = 34;
                     jjCheckNAdd(33);
                     break;
                  case 1:
                     if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                        break;
                     if (kind > 34)
                        kind = 34;
                     jjCheckNAdd(33);
                     break;
                  case 2:
                     if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                        jjAddStates(10, 11);
                     break;
                  case 5:
                     if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                        jjAddStates(12, 13);
                     break;
                  default : break;
               }
            } while(i != startsAt);
         }
         if (kind != 0x7fffffff)
         {
            jjmatchedKind = kind;
            jjmatchedPos = curPos;
            kind = 0x7fffffff;
         }
         ++curPos;
         if ((i = jjnewStateCnt) == (startsAt = 140 - (jjnewStateCnt = startsAt)))
            return curPos;
         try { curChar = input_stream.readChar(); }
         catch(java.io.IOException e) { return curPos; }
      }
   }
   static final int[] jjnextStates = {
           123, 139, 99, 114, 70, 77, 91, 39, 47, 62, 2, 3, 5, 6,
   };
   private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
   {
      switch(hiByte)
      {
         case 0:
            return ((jjbitVec2[i2] & l2) != 0L);
         default :
            if ((jjbitVec0[i1] & l1) != 0L)
               return true;
            return false;
      }
   }
   private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
   {
      switch(hiByte)
      {
         case 0:
            return ((jjbitVec4[i2] & l2) != 0L);
         case 1:
            return ((jjbitVec5[i2] & l2) != 0L);
         case 2:
            return ((jjbitVec6[i2] & l2) != 0L);
         case 3:
            return ((jjbitVec7[i2] & l2) != 0L);
         case 4:
            return ((jjbitVec8[i2] & l2) != 0L);
         case 5:
            return ((jjbitVec9[i2] & l2) != 0L);
         case 6:
            return ((jjbitVec10[i2] & l2) != 0L);
         case 9:
            return ((jjbitVec11[i2] & l2) != 0L);
         case 10:
            return ((jjbitVec12[i2] & l2) != 0L);
         case 11:
            return ((jjbitVec13[i2] & l2) != 0L);
         case 12:
            return ((jjbitVec14[i2] & l2) != 0L);
         case 13:
            return ((jjbitVec15[i2] & l2) != 0L);
         case 14:
            return ((jjbitVec16[i2] & l2) != 0L);
         case 15:
            return ((jjbitVec17[i2] & l2) != 0L);
         case 16:
            return ((jjbitVec18[i2] & l2) != 0L);
         case 17:
            return ((jjbitVec19[i2] & l2) != 0L);
         case 30:
            return ((jjbitVec20[i2] & l2) != 0L);
         case 31:
            return ((jjbitVec21[i2] & l2) != 0L);
         case 33:
            return ((jjbitVec22[i2] & l2) != 0L);
         case 48:
            return ((jjbitVec23[i2] & l2) != 0L);
         case 49:
            return ((jjbitVec24[i2] & l2) != 0L);
         case 159:
            return ((jjbitVec25[i2] & l2) != 0L);
         case 215:
            return ((jjbitVec26[i2] & l2) != 0L);
         default :
            if ((jjbitVec3[i1] & l1) != 0L)
               return true;
            return false;
      }
   }
   private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
   {
      switch(hiByte)
      {
         case 0:
            return ((jjbitVec27[i2] & l2) != 0L);
         case 1:
            return ((jjbitVec5[i2] & l2) != 0L);
         case 2:
            return ((jjbitVec28[i2] & l2) != 0L);
         case 3:
            return ((jjbitVec29[i2] & l2) != 0L);
         case 4:
            return ((jjbitVec30[i2] & l2) != 0L);
         case 5:
            return ((jjbitVec31[i2] & l2) != 0L);
         case 6:
            return ((jjbitVec32[i2] & l2) != 0L);
         case 9:
            return ((jjbitVec33[i2] & l2) != 0L);
         case 10:
            return ((jjbitVec34[i2] & l2) != 0L);
         case 11:
            return ((jjbitVec35[i2] & l2) != 0L);
         case 12:
            return ((jjbitVec36[i2] & l2) != 0L);
         case 13:
            return ((jjbitVec37[i2] & l2) != 0L);
         case 14:
            return ((jjbitVec38[i2] & l2) != 0L);
         case 15:
            return ((jjbitVec39[i2] & l2) != 0L);
         case 16:
            return ((jjbitVec18[i2] & l2) != 0L);
         case 17:
            return ((jjbitVec19[i2] & l2) != 0L);
         case 30:
            return ((jjbitVec20[i2] & l2) != 0L);
         case 31:
            return ((jjbitVec21[i2] & l2) != 0L);
         case 32:
            return ((jjbitVec40[i2] & l2) != 0L);
         case 33:
            return ((jjbitVec22[i2] & l2) != 0L);
         case 48:
            return ((jjbitVec41[i2] & l2) != 0L);
         case 49:
            return ((jjbitVec24[i2] & l2) != 0L);
         case 159:
            return ((jjbitVec25[i2] & l2) != 0L);
         case 215:
            return ((jjbitVec26[i2] & l2) != 0L);
         default :
            if ((jjbitVec3[i1] & l1) != 0L)
               return true;
            return false;
      }
   }
   public static final String[] jjstrLiteralImages = {
           "", null, "\57", "\57\57", "\174", "\53", "\55", "\75", "\41\75", "\74",
           "\74\75", "\76", "\76\75", "\44", null, null, null, null, null, null, null, null, null,
           "\151\144", "\157\162", "\141\156\144", "\155\157\144", "\144\151\166", "\153\145\171",
           "\156\157\144\145", "\164\145\170\164", "\143\157\155\155\145\156\164",
           "\160\162\157\143\145\163\163\151\156\147\55\151\156\163\164\162\165\143\164\151\157\156", null, null, "\72", "\50", "\51", "\54", "\100", "\56", "\56\56", "\133",
           "\135", "\52", };
   public static final String[] lexStateNames = {
           "DEFAULT",
   };
   static final long[] jjtoToken = {
           0x1fffff817ffdL,
   };
   static final long[] jjtoSkip = {
           0x2L,
   };
   static final long[] jjtoSpecial = {
           0x2L,
   };
   private ASCII_UCodeESC_CharStream input_stream;
   private final int[] jjrounds = new int[140];
   private final int[] jjstateSet = new int[280];
   protected char curChar;
   public XPathParserTokenManager(ASCII_UCodeESC_CharStream stream)
   {
      if (ASCII_UCodeESC_CharStream.staticFlag)
         throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
      input_stream = stream;
   }
   public XPathParserTokenManager(ASCII_UCodeESC_CharStream stream, int lexState)
   {
      this(stream);
      SwitchTo(lexState);
   }
   public void ReInit(ASCII_UCodeESC_CharStream stream)
   {
      jjmatchedPos = jjnewStateCnt = 0;
      curLexState = defaultLexState;
      input_stream = stream;
      ReInitRounds();
   }
   private final void ReInitRounds()
   {
      int i;
      jjround = 0x80000001;
      for (i = 140; i-- > 0;)
         jjrounds[i] = 0x80000000;
   }
   public void ReInit(ASCII_UCodeESC_CharStream stream, int lexState)
   {
      ReInit(stream);
      SwitchTo(lexState);
   }
   public void SwitchTo(int lexState)
   {
      if (lexState >= 1 || lexState < 0)
         throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
      else
         curLexState = lexState;
   }

   private final Token jjFillToken()
   {
      Token t = Token.newToken(jjmatchedKind);
      t.kind = jjmatchedKind;
      String im = jjstrLiteralImages[jjmatchedKind];
      t.image = (im == null) ? input_stream.GetImage() : im;
      t.beginLine = input_stream.getBeginLine();
      t.beginColumn = input_stream.getBeginColumn();
      t.endLine = input_stream.getEndLine();
      t.endColumn = input_stream.getEndColumn();
      return t;
   }

   int curLexState = 0;
   int defaultLexState = 0;
   int jjnewStateCnt;
   int jjround;
   int jjmatchedPos;
   int jjmatchedKind;

   //for token symbolic
   public static int token_index = 0;
   public static String token_image = "";
   public static int oldtoken = -1;
   public static int oldpos = -1;
   public final Token getNextToken()
   {
      int kind;
      Token specialToken = null;
      Token matchedToken;
      int curPos = 0;

      EOFLoop :
      for (;;)
      {
         try
         {
            curChar = input_stream.BeginToken();
         }
         catch(java.io.IOException e)
         {
            jjmatchedKind = 0;
            matchedToken = jjFillToken();
            matchedToken.specialToken = specialToken;
            //    return matchedToken;
            if(matchedToken.kind==0) // unsymb EOF
               return matchedToken;
            return matchedToken;
         }

         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0(); // can generate constraints of cur which is a symbolic var
         if (jjmatchedKind != 0x7fffffff)
         {
            if (jjmatchedPos + 1 < curPos)
               input_stream.backup(curPos - jjmatchedPos - 1);
            if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
            {
               matchedToken = jjFillToken();
               matchedToken.specialToken = specialToken;
               //       return matchedToken;

               return matchedToken;
            }
            else
            {
               if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
               {
                  matchedToken = jjFillToken();
                  if (specialToken == null)
                     specialToken = matchedToken;
                  else
                  {
                     matchedToken.specialToken = specialToken;
                     specialToken = (specialToken.next = matchedToken);
                  }
               }
               continue EOFLoop;
            }
         }
         int error_line = input_stream.getEndLine();
         int error_column = input_stream.getEndColumn();
         String error_after = null;
         boolean EOFSeen = false;
         try { input_stream.readChar(); input_stream.backup(1); }
         catch (java.io.IOException e1) {
            EOFSeen = true;
            error_after = curPos <= 1 ? "" : input_stream.GetImage();
            if (curChar == '\n' || curChar == '\r') {
               error_line++;
               error_column = 0;
            }
            else
               error_column++;
         }
         if (!EOFSeen) {
            input_stream.backup(1);
            error_after = curPos <= 1 ? "" : input_stream.GetImage();
         }
         throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
         //   throw new Error();
      }
   }

}
