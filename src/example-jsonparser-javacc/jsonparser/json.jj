/*
 * Json解析器
 * 作者： 徐犇
 * JavaCC版本:	6.0
 * 创建日期:  2014/10/01
 * 最后修改: 	2014/10/01
 */
 
options
{

  //此选项将代码中的u转义符转换成对应的unicode字符，为了避免出错，先加上此选项，日后可以去掉，并改用预处理的方式实现
  JAVA_UNICODE_ESCAPE = true;
  
  //此选项允许代码中有中文，如果JAVA_UNICODE_ESCAPE设为false，则应该加上该选项
  //UNICODE_INPUT = true;

  //此选项使可以new出任意多个Parser对象,以便在多线程环境中使用
  STATIC = false;

  //不报告错误，可以提高效率
  ERROR_REPORTING = false;

  //缓存token，可以提高效率，但因此不适合交互式使用
  CACHE_TOKENS = true;

  JDK_VERSION = "1.6";
}

PARSER_BEGIN(JSONParser)

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.Reader;
import java.util.ArrayList;


public class JSONParser {
  
	private JSONObject obj;	

	public static JSONObject parse(Reader r) throws ParseException {
		JSONParser parser = new JSONParser(r);
		return parser.parse();
	}
	public static JSONObject parse(String filePath) throws IOException,
			ParseException {
		if (filePath == null) {
			return null;
		}
		File f = new File(filePath);
		FileInputStream fis = null;
		try {
			fis = new FileInputStream(f);
			InputStreamReader isr = new InputStreamReader(fis);
			BufferedReader br = new BufferedReader(isr);
			return parse(br);
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
		return null;
	}

	private Object makeNumber(String numstr) {
		try {
			Integer i = Integer.parseInt(numstr);
			return i;
		} catch (NumberFormatException e) {
		}
		try {
			Long l = Long.parseLong(numstr);
			return l;
		} catch (NumberFormatException e) {
		}
		try {
			Double d = Double.parseDouble(numstr);
			return d;
		} catch (NumberFormatException e) {
		}
		return null;
	}
	
	
}
PARSER_END(JSONParser)

/* WHITE SPACE */
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
| "\b"
}

/* LITERALS */

TOKEN :
{
  < INTEGER_LITERAL:   <DECIMAL_LITERAL> 
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
| 
  < FLOATING_POINT_LITERAL:
   < DEC_FLOATING_POINT_LITERAL >
  >
| 
  < #DEC_FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* (<DEC_EXPONENT>)? 
      | "." (["0"-"9"])+ (<DEC_EXPONENT>)? 
      | (["0"-"9"])+ <DEC_EXPONENT> 
      | (["0"-"9"])+ (<DEC_EXPONENT>)?
  >
|
  < #DEC_EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
| < TRUE : "true" >
| < FALSE: "false" >
| < NULL : "null" >
}

/* SEPARATORS */

TOKEN :
{
  < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < COMMA: "," >
| < COLON: ":" >
}

/* ****************************************
 * THE JSON LANGUAGE GRAMMAR STARTS HERE *
 *****************************************/

/*
 * Program structuring syntax follows.
 */

JSONObject parse():
{
  JSONObject obj;
}
{
  obj = Object()
  <EOF>
  {
    return obj;  }
}

JSONObject Object():
{
  JSONObject obj = new JSONObject();
  JSONCollection col; 
}
{
  < LBRACE >
  col = Collection()
  {
    obj.addPair(col);  }
  (
    < COMMA >
    col = Collection()
    {    obj.addPair(col);
    }  )*
  < RBRACE >
  {
    return obj;  }
}

JSONCollection Collection():
{
  Token t;
  Object o;
}
{
  t = < STRING_LITERAL >
  < COLON >
  o = Value()
  {
    JSONCollection col = new JSONCollection(t.image, o);
    return col;  }
}

Object Value():
{
  JSONObject jo;
  Object o;
  Token t;  
}
{
   jo = Object()
   {
     return jo;   }
| o = Array(){
  return o;}
| < TRUE >
{
  return true;}
| < FALSE >
{
  return false;}
| < NULL >
{
  return null;}
| t = < STRING_LITERAL >
{
  return t.image;}
| t = < INTEGER_LITERAL >
{
  return makeNumber(t.image);}
| t = < FLOATING_POINT_LITERAL >
{
  return makeNumber(t.image);
}
}

Object Array():
{
  ArrayList<Object> list = new ArrayList<Object>();
  Object v;
}
{
 < LBRACKET >
 v = Value()
 {
   list.add(v); }
 (
   < COMMA >
   v = Value()
   {
     list.add(v);   } )*
 < RBRACKET >
 {
		int len = list.size();
		if(len <= 0) {
			return null;
		}
		Object[] ret = new Object[len];
		for(int i = 0; i < len; i++) {
			ret[i] = list.get(i);
		}
		return ret;
 } 
}