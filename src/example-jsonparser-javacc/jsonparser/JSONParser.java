package jsonparser;/* Generated By:JavaCC: Do not edit this line. JSONParser.java */
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.Reader;
import java.util.ArrayList;


public class JSONParser implements JSONParserConstants {

        private JSONObject obj;

        public static JSONObject parse(Reader r) throws ParseException {
                JSONParser parser = new JSONParser(r);
                return parser.parse();
        }
        public static JSONObject parse(String filePath) throws IOException,
                        ParseException {
                if (filePath == null) {
                        return null;
                }
                File f = new File(filePath);
                FileInputStream fis = null;
                try {
                        fis = new FileInputStream(f);
                        InputStreamReader isr = new InputStreamReader(fis);
                        BufferedReader br = new BufferedReader(isr);
                        return parse(br);
                } catch (FileNotFoundException e) {
                        e.printStackTrace();
                }
                return null;
        }

        private Object makeNumber(String numstr) {
                try {
                        Integer i = Integer.parseInt(numstr);
                        return i;
                } catch (NumberFormatException e) {
                }
                try {
                        Long l = Long.parseLong(numstr);
                        return l;
                } catch (NumberFormatException e) {
                }
                try {
                        Double d = Double.parseDouble(numstr);
                        return d;
                } catch (NumberFormatException e) {
                }
                return null;
        }

/* ****************************************
 * THE JSON LANGUAGE GRAMMAR STARTS HERE *
 *****************************************/

/*
 * Program structuring syntax follows.
 */
  final public JSONObject parse() throws ParseException {
  JSONObject obj;
    obj = Object();
    jj_consume_token(0);
    {if (true) return obj;}
    throw new Error("Missing return statement in function");
  }

  final public JSONObject Object() throws ParseException {
  JSONObject obj = new JSONObject();
  JSONCollection col;
    jj_consume_token(LBRACE);
    col = Collection();
    obj.addPair(col);
    label_1:
    while (true) {
      switch (jj_nt.kind) {
      case COMMA:
        ;
        break;
      default:
        break label_1;
      }
      jj_consume_token(COMMA);
      col = Collection();
    obj.addPair(col);
    }
    jj_consume_token(RBRACE);
    {if (true) return obj;}
    throw new Error("Missing return statement in function");
  }

  final public JSONCollection Collection() throws ParseException {
  Token t;
  Object o;
    t = jj_consume_token(STRING_LITERAL);
    jj_consume_token(COLON);
    o = Value();
    JSONCollection col = new JSONCollection(t.image, o);
    {if (true) return col;}
    throw new Error("Missing return statement in function");
  }

  final public Object Value() throws ParseException {
  JSONObject jo;
  Object o;
  Token t;
    switch (jj_nt.kind) {
    case LBRACE:
      jo = Object();
     {if (true) return jo;}
      break;
    case LBRACKET:
      o = Array();
  {if (true) return o;}
      break;
    case TRUE:
      jj_consume_token(TRUE);
  {if (true) return true;}
      break;
    case FALSE:
      jj_consume_token(FALSE);
  {if (true) return false;}
      break;
    case NULL:
      jj_consume_token(NULL);
  {if (true) return null;}
      break;
    case STRING_LITERAL:
      t = jj_consume_token(STRING_LITERAL);
  {if (true) return t.image;}
      break;
    case INTEGER_LITERAL:
      t = jj_consume_token(INTEGER_LITERAL);
  {if (true) return makeNumber(t.image);}
      break;
    case FLOATING_POINT_LITERAL:
      t = jj_consume_token(FLOATING_POINT_LITERAL);
  {if (true) return makeNumber(t.image);}
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Object Array() throws ParseException {
  ArrayList<Object> list = new ArrayList<Object>();
  Object v;
    jj_consume_token(LBRACKET);
    v = Value();
   list.add(v);
    label_2:
    while (true) {
      switch (jj_nt.kind) {
      case COMMA:
        ;
        break;
      default:
        break label_2;
      }
      jj_consume_token(COMMA);
      v = Value();
     list.add(v);
    }
    jj_consume_token(RBRACKET);
                int len = list.size();
                if(len <= 0) {
                        {if (true) return null;}
                }
                Object[] ret = new Object[len];
                for(int i = 0; i < len; i++) {
                        ret[i] = list.get(i);
                }
                {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public JSONParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;

  /** Constructor with InputStream. */
  public JSONParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public JSONParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new JSONParserTokenManager(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
  }

  /** Constructor. */
  public JSONParser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new JSONParserTokenManager(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
  }

  /** Constructor with generated Token Manager. */
  public JSONParser(JSONParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
  }

  /** Reinitialise. */
  public void ReInit(JSONParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken = token;
    if ((token = jj_nt).next != null) jj_nt = jj_nt.next;
    else jj_nt = jj_nt.next = token_source.getNextToken();
    if (token.kind == kind) {
      return token;
    }
    jj_nt = token;
    token = oldToken;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if ((token = jj_nt).next != null) jj_nt = jj_nt.next;
    else jj_nt = jj_nt.next = token_source.getNextToken();
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    Token errortok = token.next;
    int line = errortok.beginLine, column = errortok.beginColumn;
    String mess = (errortok.kind == 0) ? tokenImage[0] : errortok.image;
    return new ParseException("Parse error at line " + line + ", column " + column + ".  Encountered: " + mess);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
