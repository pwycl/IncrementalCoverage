package uri;
/* Generated By:JavaCC: Do not edit this line. Parser.java */
import java.util.ArrayList;
import java.io.File;
import java.io.FilenameFilter;
import java.util.Arrays;
import uri.Node;

public class Parser implements ParserConstants {

                        public static void main(String[] args) {
                                 final String dir = "src/example-urijavacc/tests";
                                 final File[] files = new File(dir).listFiles(new FilenameFilter() {
                                     public boolean accept(File dir, String filename)
                                     { return filename.endsWith(".sl"); }
                                 });
                                Arrays.sort(files);
                                 for (File f : files) {
//                                    File f = new File("tests/Object.sl");
                                     try {
                                         System.out.println("=====\u005cn= Parsing file " + f.getPath() + "=\u005cn=====");
                                         Program p = new Parser(new java.io.FileInputStream(f.getPath())).translationUnit();
                                         System.out.println(p.toString());
                                         System.out.println("======\u005cn\u005cn");
                                     } catch (Exception e) {
                                         System.out.println("Failed to parse " + f);
                                         e.printStackTrace();
                                     }
                                 }
                         }

/////////////////////////////////////////////////////////
//       The uri syntactic grammar starts here         //
/////////////////////////////////////////////////////////


// Parse a compilation unit
//       translationUnit ::= {function}
  final public Program translationUnit() throws ParseException {
                            ArrayList<Function> functions; Function aFunction;
      functions = new ArrayList<Function>();
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FUNCTION:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        aFunction = function();
              functions.add(aFunction);
      }
      jj_consume_token(0);
    } catch (ParseException e) {
//        System.out.println("Failed to parse translationUnit");
//        e.printStackTrace();
    }
      {if (true) return new Program(functions);}
    throw new Error("Missing return statement in function");
  }

// Parse a qualified identifier.
//   qualifiedIdentifier ::= IDENTIFIER {DOT IDENTIFIER}
  final public Node qualifiedIdentifier() throws ParseException {
    String qualifiedIdentifier = "";
    try {
      jj_consume_token(IDENTIFIER);
            qualifiedIdentifier = token.image;
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOT:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_2;
        }
        jj_consume_token(DOT);
        jj_consume_token(IDENTIFIER);
              qualifiedIdentifier += "." + token.image;
      }
    } catch (ParseException e) {
        System.out.println("Failed to parse qualifiedIdentifier");
        e.printStackTrace();
    }
      {if (true) return new QualifiedIdentifier(qualifiedIdentifier);}
    throw new Error("Missing return statement in function");
  }

// Parse a function
//      Function ::= FUNCTION IDENTIFIER LPAREN [IDENTIFIER {COMMA IDENTIFIER}] RPAREN Block
  final public Function function() throws ParseException {
                      String name; ArrayList<Node> args;
      args = new ArrayList<Node>(); name = "";
    try {
      jj_consume_token(FUNCTION);
      jj_consume_token(IDENTIFIER);
                              name = token.image;
      args = arguments();
    } catch (ParseException e) {
        System.out.println("Failed to parse Function");
        e.printStackTrace();
    }
      {if (true) return new Function(name, args, block());}
    throw new Error("Missing return statement in function");
  }

// Parse a block
//      Block ::= LCURLY {blockStatement} RCURLY
  final public Block block() throws ParseException {
                ArrayList<Node> statements; Node aStatement;
      statements = new ArrayList<Node>();
    try {
      jj_consume_token(LCURLY);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case RETURN:
        case IF:
        case WHILE:
        case LPAREN:
        case LCURLY:
        case IDENTIFIER:
        case INT_LITERAL:
        case STRING_LITERAL:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_3;
        }
        aStatement = blockStatement();
              statements.add( aStatement );
      }
      jj_consume_token(RCURLY);
    } catch (ParseException e) {
        System.out.println("Failed to parse block");
        e.printStackTrace();
    }
      {if (true) return new Block(statements);}
    throw new Error("Missing return statement in function");
  }

// Parse a  blockStatement
//      blockStatement ::= variableDeclarator | statement
  final public Node blockStatement() throws ParseException {
    Node statement = null;
    try {
      if (jj_2_1(2147483647)) {
        statement = variableDeclarator();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case RETURN:
        case IF:
        case WHILE:
        case LPAREN:
        case LCURLY:
        case IDENTIFIER:
        case INT_LITERAL:
        case STRING_LITERAL:
          statement = statement();
          break;
        default:
          jj_la1[3] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException e) {
        System.out.println("Failed to parse blockStatement");
        e.printStackTrace();
    }
      {if (true) return statement;}
    throw new Error("Missing return statement in function");
  }

// Parse a variableDeclarator
//      variableDeclarator ::= IDENTIFIER [ASSIGN expression] SEMI
  final public Variable variableDeclarator() throws ParseException {
                                Node expr = null; int line = 0; String name = ""; String value = "";
    try {
      jj_consume_token(IDENTIFIER);
                        line = token.beginLine; name = token.image;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        jj_consume_token(ASSIGN);
        expr = expression();
                                           value = expr.toString();
        break;
      default:
        jj_la1[4] = jj_gen;
        ;
      }
      jj_consume_token(SEMI);
    } catch (ParseException e) {
        System.out.println("Failed to parse variableDeclarator for variable " + name);
        e.printStackTrace();
    }
      {if (true) return new Variable(name, value);}
    throw new Error("Missing return statement in function");
  }

// Parse arguments.
//      arguments ::= LPAREN [expression {COMMA expression}] RPAREN
  final public ArrayList<Node> arguments() throws ParseException {
    ArrayList<Node> args = new ArrayList<Node>();
    Node anExpression = null;
    try {
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
      case IDENTIFIER:
      case INT_LITERAL:
      case STRING_LITERAL:
        anExpression = expression();
                                          args.add( anExpression );
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[5] = jj_gen;
            break label_4;
          }
          jj_consume_token(COMMA);
          anExpression = expression();
                  args.add( anExpression );
        }
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
    } catch (ParseException e) {
        System.out.println("Failed to parse arguments");
        e.printStackTrace();
    }
      {if (true) return args;}
    throw new Error("Missing return statement in function");
  }

  final private Node parExpression() throws ParseException {
    Node expr = null;
    try {
      jj_consume_token(LPAREN);
      expr = expression();
      jj_consume_token(RPAREN);
    } catch (ParseException e) {
        System.out.println("Failed to parse parExpression");
        e.printStackTrace();
    }
      {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

// Parse a statement
//     statement ::= block
//                | IF parExpression statement [ELSE statement]
//                | WHILE parExpression statement
//                | RETURN [expression] SEMI
//                | SEMI
//                | expression SEMI // TODO validate side effects
  final public Node statement() throws ParseException {
    Node stmt = null;
    Node expr = null;
    Node cond = null;
    Node body = null;
    Node ifel = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LCURLY:
        stmt = block();
        break;
      case IF:
        jj_consume_token(IF);
                 cond = parExpression(); body = statement();
        if (jj_2_2(2147483647)) {
          jj_consume_token(ELSE);
          ifel = statement();
        } else {
          ;
        }
          stmt = new If(cond, body, ifel);
        break;
      case WHILE:
        jj_consume_token(WHILE);
        cond = parExpression();
        body = statement();
          stmt = new While(cond, body);
        break;
      case RETURN:
        jj_consume_token(RETURN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
        case IDENTIFIER:
        case INT_LITERAL:
        case STRING_LITERAL:
          expr = expression();
          break;
        default:
          jj_la1[7] = jj_gen;
          ;
        }
        jj_consume_token(SEMI);
          stmt = new Return(expr);
        break;
      case LPAREN:
      case IDENTIFIER:
      case INT_LITERAL:
      case STRING_LITERAL:
        stmt = expression();
        jj_consume_token(SEMI);
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
        System.out.println("Failed to parse statement");
        e.printStackTrace();
    }
      {if (true) return stmt;}
    throw new Error("Missing return statement in function");
  }

// Parse an expression
//  expression ::= assignmentExpression
  final public Node expression() throws ParseException {
    Node expr = null; String id = null; ArrayList<String> args = null;
    try {
      expr = assignmentExpression();
    } catch (ParseException e) {
        System.out.println("Failed to parse an expression");
        e.printStackTrace();
    }
      {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

// Parse an assignment expression.
//      assignmentExpression ::= conditionalOrExpression  // level 13
//                               [(ASSIGN) assignmentExpression]
  final public Node assignmentExpression() throws ParseException {
    Node lhs = null, rhs = null;
    try {
      lhs = conditionalOrExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        jj_consume_token(ASSIGN);
        rhs = assignmentExpression();
              lhs = new Variable(lhs.toString(), rhs.toString());
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
    } catch (ParseException e) {
        System.out.println("Failed to parse assignmentExpression");
        e.printStackTrace();
    }
      {if (true) return lhs;}
    throw new Error("Missing return statement in function");
  }

// Parse a conditional-or expression.
//      conditionalOrExpression ::= conditionalAndExpression // level 11
//                                  {LOR conditionalAndExpression}
  final public Node conditionalOrExpression() throws ParseException {
    Node lhs = null, rhs = null;
    try {
      lhs = conditionalAndExpression();
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LOR:
          ;
          break;
        default:
          jj_la1[10] = jj_gen;
          break label_5;
        }
        jj_consume_token(LOR);
        rhs = conditionalAndExpression();
              lhs = new BinaryExpression(lhs, rhs, tokenImage[LOR]);
      }
    } catch (ParseException e) {
        System.out.println("Failed to parse conditionalOrExpression");
        e.printStackTrace();
    }
      {if (true) return lhs;}
    throw new Error("Missing return statement in function");
  }

// Parse a conditional-and expression.
// conditionalAndExpression ::= inclusiveOrExpression // level 10
//                              {LAND inclusiveOrExpression}
  final public Node conditionalAndExpression() throws ParseException {
    Node lhs = null, rhs = null;
    try {
      lhs = equalityExpression();
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LAND:
          ;
          break;
        default:
          jj_la1[11] = jj_gen;
          break label_6;
        }
        jj_consume_token(LAND);
        rhs = equalityExpression();
              lhs = new BinaryExpression(lhs, rhs, tokenImage[LAND]);
      }
    } catch (ParseException e) {
        System.out.println("Failed to parse conditionalAndExpression");
        e.printStackTrace();
    }
      {if (true) return lhs;}
    throw new Error("Missing return statement in function");
  }

// Parse an equality expression.
//  equalityExpression ::= relationalExpression  // level 6
//                          {(EQUAL|NOT_EQUAL) relationalExpression}
  final public Node equalityExpression() throws ParseException {
    Node lhs = null, rhs = null;
    String op = null;
    try {
      lhs = relationalExpression();
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EQUAL:
        case NOT_EQUAL:
          ;
          break;
        default:
          jj_la1[12] = jj_gen;
          break label_7;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EQUAL:
          jj_consume_token(EQUAL);
          rhs = relationalExpression();
              lhs = new BinaryExpression(lhs, rhs, tokenImage[EQUAL]);
          break;
        case NOT_EQUAL:
          jj_consume_token(NOT_EQUAL);
          rhs = relationalExpression();
              lhs = new BinaryExpression(lhs, rhs, tokenImage[NOT_EQUAL]);
          break;
        default:
          jj_la1[13] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException e) {
        System.out.println("Failed to parse equalityExpression");
        e.printStackTrace();
    }
      {if (true) return lhs;}
    throw new Error("Missing return statement in function");
  }

// Parse a relational expression.
//
//   relationalExpression ::= primary  // level 5
//                          [ (GT | LT | GE | LE) primary
  final public Node relationalExpression() throws ParseException {
    Node lhs = null, rhs = null;
    String op = null;
    try {
      lhs = additiveExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GT:
      case GE:
      case LT:
      case LE:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case GT:
          jj_consume_token(GT);
          rhs = additiveExpression();
              lhs = new BinaryExpression(lhs, rhs, tokenImage[GT]);
          break;
        case LT:
          jj_consume_token(LT);
          rhs = additiveExpression();
              lhs = new BinaryExpression(lhs, rhs, tokenImage[LT]);
          break;
        case GE:
          jj_consume_token(GE);
          rhs = additiveExpression();
              lhs = new BinaryExpression(lhs, rhs, tokenImage[GE]);
          break;
        case LE:
          jj_consume_token(LE);
          rhs = additiveExpression();
              lhs = new BinaryExpression(lhs, rhs, tokenImage[LE]);
          break;
        default:
          jj_la1[14] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[15] = jj_gen;
        ;
      }
    } catch (ParseException e) {
        System.out.println("Failed to parse relationalExpression");
        e.printStackTrace();
    }
      {if (true) return lhs;}
    throw new Error("Missing return statement in function");
  }

// Parse an additive expression.
//      additiveExpression ::= multiplicativeExpression // level 3
//                          {(PLUS|MINUS) multiplicativeExpression}
  final public Node additiveExpression() throws ParseException {
    Node lhs = null, rhs = null;
    try {
      lhs = multiplicativeExpression();
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
        case MINUS:
          ;
          break;
        default:
          jj_la1[16] = jj_gen;
          break label_8;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          jj_consume_token(PLUS);
          rhs = multiplicativeExpression();
              lhs = new BinaryExpression(lhs, rhs, tokenImage[PLUS]);
          break;
        case MINUS:
          jj_consume_token(MINUS);
          rhs = multiplicativeExpression();
              lhs = new BinaryExpression(lhs, rhs, tokenImage[MINUS]);
          break;
        default:
          jj_la1[17] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException e) {
        System.out.println("Failed to parse additiveExpression");
        e.printStackTrace();
    }
      {if (true) return lhs;}
    throw new Error("Missing return statement in function");
  }

// Parse a multiplicative expression.
//  multiplicativeExpression ::= unaryExpression  // level 2
//                              {(STAR|DIV) unaryExpression}
  final public Node multiplicativeExpression() throws ParseException {
    int line = 0;
    Node lhs = null, rhs = null;
    try {
      lhs = primary();
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STAR:
        case DIV:
          ;
          break;
        default:
          jj_la1[18] = jj_gen;
          break label_9;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STAR:
          jj_consume_token(STAR);
          rhs = primary();
              lhs = new BinaryExpression(lhs, rhs, tokenImage[STAR]);
          break;
        case DIV:
          jj_consume_token(DIV);
          rhs = primary();
              lhs = new BinaryExpression(lhs, rhs, tokenImage[DIV]);
          break;
        default:
          jj_la1[19] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException e) {
        System.out.println("Failed to parse multiplicativeExpression");
        e.printStackTrace();
    }
      {if (true) return lhs;}
    throw new Error("Missing return statement in function");
  }

//  Parse an primary
//  primary ::= parExpression
//               | IDENTIFIER [arguments]
//               | IDENTIFIER
//               | literal
//               | qualifiedIdentifier // arguments?
  final public Node primary() throws ParseException {
    String id = null; ArrayList<Node> args = null;
    Node expr = null, node = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        expr = parExpression();
        break;
      default:
        jj_la1[20] = jj_gen;
        if (jj_2_3(2147483647)) {
          expr = qualifiedIdentifier();
        } else if (jj_2_4(2147483647)) {
          jj_consume_token(IDENTIFIER);
                       id = token.image; args = new ArrayList<Node>();
          args = arguments();
          expr = new FunctionCall(id, args);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFIER:
            jj_consume_token(IDENTIFIER);
                         expr = new Expression(token.image);
            break;
          case INT_LITERAL:
          case STRING_LITERAL:
            expr = literal();
            break;
          default:
            jj_la1[21] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } catch (ParseException e) {
        System.out.println("Failed to parse an expression");
        e.printStackTrace();
    }
      {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

// Parse a literal
//     literal ::= INT_LITERAL
//               | STRING_LITERAL
  final public Node literal() throws ParseException {
                 Node expr = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT_LITERAL:
        jj_consume_token(INT_LITERAL);
          expr = new NumberLiteral(token.image);
        break;
      case STRING_LITERAL:
        jj_consume_token(STRING_LITERAL);
          expr = new StringLiteral(token.image);
        break;
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
        System.out.println("Failed to parse literal");
        e.printStackTrace();
    }
      {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_3_4() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(ELSE)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[23];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x100,0x0,0x14001600,0x14001600,0x2000,0x0,0x4000000,0x4000000,0x14001600,0x2000,0x1000000,0x2000000,0xc000,0xc000,0xf0000,0xf0000,0xc00000,0xc00000,0x300000,0x300000,0x4000000,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x4,0x188,0x188,0x0,0x2,0x188,0x188,0x188,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x188,0x180,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[4];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[43];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 23; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 43; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 4; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
