/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. CurtaParser.jj */
/*@egen*/options {
  STATIC=false;
                         
                         
}

PARSER_BEGIN(CurtaParser)

package nl.bigo.curta;

public class CurtaParser/*@bgen(jjtree)*/implements CurtaParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTCurtaParserState jjtree = new JJTCurtaParserState();

/*@egen*/
}

PARSER_END(CurtaParser)

/**
 * Lexer rules
 */
TOKEN :
{
     < EOS        : ";" | "\r\n" | "\n" | "\r" >
  |  < OParen     : "(" >
  |  < CParen     : ")" >
  |  < Assign     : "=" >
  |  < Or         : "||" >
  |  < And        : "&&" >
  |  < BOr        : "|" >
  |  < BXOr       : "^" >
  |  < BAnd       : "&" >
  |  < Add        : "+" >
  |  < Sub        : "-" >
  |  < Pow        : "**" >
  |  < Mul        : "*" >
  |  < Div        : "/" >
  |  < Mod        : "%" >
  |  < GTE        : ">=" >
  |  < GT         : ">" >
  |  < LTE        : "<=" >
  |  < LT         : "<" >
  |  < SLShift    : "<<" >
  |  < URShift    : ">>>" >
  |  < SRShift    : ">>" >
  |  < Eq         : "==" >
  |  < NEq        : "!=" >
  |  < Not        : "!" >
  |  < BNot       : "~" >
  |  < Comma      : "," >
  |  < True       : "true" >
  |  < False      : "false" >
  |  < Null       : "null" >
  |  < Return     : "return" >
  |  < NumDouble  : (<Digit>)+ "." (<Digit>)+ | "." (<Digit>)+ >
  |  < NumLong    : (<Digit>)+ >
  |  < Identifier : ("_" | <Letter>) ("_" | <AlphaNum>)* >
}

TOKEN :
{
     < #Digit    : ["0"-"9"] >
  |  < #Letter   : ["a"-"z","A"-"Z"] >
  |  < #AlphaNum : <Letter> | <Digit> >
}

SKIP :
{
     " " 
  |  "\t"
}

/**
 * Parser rules javacc options
 */
public CurtaNode ast()       :
{/*@bgen(jjtree) Root */
  CurtaNode jjtn000 = new CurtaNode(JJTROOT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Root */
  try {
/*@egen*/
  (<EOS>)* statements() <EOF>/*@bgen(jjtree)*/
                              {
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                              }
/*@egen*/ {return jjtn000;}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

private void statements() :
{}
{
  (LOOKAHEAD(2) assignment() (<EOS>)+)* ret()
}

private void ret()         :
{/*@bgen(jjtree) Return */
  CurtaNode jjtn000 = new CurtaNode(JJTRETURN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Return */
  try {
/*@egen*/
  (<Return>)? expr() (<EOS>)*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

private void assignment()         :
{/*@bgen(jjtree) Assign */
  CurtaNode jjtn000 = new CurtaNode(JJTASSIGN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Assign */
  try {
/*@egen*/
  id() <Assign> expr()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

private void expr() :
{}
{
  or()
}

private void or() :
{}
{
  and() ( <Or>/*@bgen(jjtree) #Or( 2) */
               {
                 CurtaNode jjtn001 = new CurtaNode(JJTOR);
                 boolean jjtc001 = true;
                 jjtree.openNodeScope(jjtn001);
               }
               try {
/*@egen*/ and()/*@bgen(jjtree)*/
               } catch (Throwable jjte001) {
                 if (jjtc001) {
                   jjtree.clearNodeScope(jjtn001);
                   jjtc001 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte001 instanceof RuntimeException) {
                   throw (RuntimeException)jjte001;
                 }
                 if (jjte001 instanceof ParseException) {
                   throw (ParseException)jjte001;
                 }
                 throw (Error)jjte001;
               } finally {
                 if (jjtc001) {
                   jjtree.closeNodeScope(jjtn001,  2);
                 }
               }
/*@egen*/       
        )*
}

private void and() :
{}
{
  bor() ( <And>/*@bgen(jjtree) #And( 2) */
                {
                  CurtaNode jjtn001 = new CurtaNode(JJTAND);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                }
                try {
/*@egen*/ bor()/*@bgen(jjtree)*/
                } catch (Throwable jjte001) {
                  if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    throw (RuntimeException)jjte001;
                  }
                  if (jjte001 instanceof ParseException) {
                    throw (ParseException)jjte001;
                  }
                  throw (Error)jjte001;
                } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001,  2);
                  }
                }
/*@egen*/        
        )*
}

private void bor() :
{}
{
  bxor() ( <BOr>/*@bgen(jjtree) #BOr( 2) */
                 {
                   CurtaNode jjtn001 = new CurtaNode(JJTBOR);
                   boolean jjtc001 = true;
                   jjtree.openNodeScope(jjtn001);
                 }
                 try {
/*@egen*/ bxor()/*@bgen(jjtree)*/
                 } catch (Throwable jjte001) {
                   if (jjtc001) {
                     jjtree.clearNodeScope(jjtn001);
                     jjtc001 = false;
                   } else {
                     jjtree.popNode();
                   }
                   if (jjte001 instanceof RuntimeException) {
                     throw (RuntimeException)jjte001;
                   }
                   if (jjte001 instanceof ParseException) {
                     throw (ParseException)jjte001;
                   }
                   throw (Error)jjte001;
                 } finally {
                   if (jjtc001) {
                     jjtree.closeNodeScope(jjtn001,  2);
                   }
                 }
/*@egen*/        
         )*
}

private void bxor() :
{}
{
  band() ( <BXOr>/*@bgen(jjtree) #BXOr( 2) */
                  {
                    CurtaNode jjtn001 = new CurtaNode(JJTBXOR);
                    boolean jjtc001 = true;
                    jjtree.openNodeScope(jjtn001);
                  }
                  try {
/*@egen*/ band()/*@bgen(jjtree)*/
                  } catch (Throwable jjte001) {
                    if (jjtc001) {
                      jjtree.clearNodeScope(jjtn001);
                      jjtc001 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte001 instanceof RuntimeException) {
                      throw (RuntimeException)jjte001;
                    }
                    if (jjte001 instanceof ParseException) {
                      throw (ParseException)jjte001;
                    }
                    throw (Error)jjte001;
                  } finally {
                    if (jjtc001) {
                      jjtree.closeNodeScope(jjtn001,  2);
                    }
                  }
/*@egen*/         
         )*
}

private void band() :
{}
{
  equality() ( <BAnd>/*@bgen(jjtree) #BAnd( 2) */
                      {
                        CurtaNode jjtn001 = new CurtaNode(JJTBAND);
                        boolean jjtc001 = true;
                        jjtree.openNodeScope(jjtn001);
                      }
                      try {
/*@egen*/ equality()/*@bgen(jjtree)*/
                      } catch (Throwable jjte001) {
                        if (jjtc001) {
                          jjtree.clearNodeScope(jjtn001);
                          jjtc001 = false;
                        } else {
                          jjtree.popNode();
                        }
                        if (jjte001 instanceof RuntimeException) {
                          throw (RuntimeException)jjte001;
                        }
                        if (jjte001 instanceof ParseException) {
                          throw (ParseException)jjte001;
                        }
                        throw (Error)jjte001;
                      } finally {
                        if (jjtc001) {
                          jjtree.closeNodeScope(jjtn001,  2);
                        }
                      }
/*@egen*/         
             )*
}

private void equality() :
{}
{
  relational() ( <Eq>/*@bgen(jjtree) #Eq( 2) */
                       {
                         CurtaNode jjtn001 = new CurtaNode(JJTEQ);
                         boolean jjtc001 = true;
                         jjtree.openNodeScope(jjtn001);
                       }
                       try {
/*@egen*/  relational()/*@bgen(jjtree)*/
                       } catch (Throwable jjte001) {
                         if (jjtc001) {
                           jjtree.clearNodeScope(jjtn001);
                           jjtc001 = false;
                         } else {
                           jjtree.popNode();
                         }
                         if (jjte001 instanceof RuntimeException) {
                           throw (RuntimeException)jjte001;
                         }
                         if (jjte001 instanceof ParseException) {
                           throw (ParseException)jjte001;
                         }
                         throw (Error)jjte001;
                       } finally {
                         if (jjtc001) {
                           jjtree.closeNodeScope(jjtn001,  2);
                         }
                       }
/*@egen*/       
               | <NEq>/*@bgen(jjtree) #NEq( 2) */
                       {
                         CurtaNode jjtn002 = new CurtaNode(JJTNEQ);
                         boolean jjtc002 = true;
                         jjtree.openNodeScope(jjtn002);
                       }
                       try {
/*@egen*/ relational()/*@bgen(jjtree)*/
                       } catch (Throwable jjte002) {
                         if (jjtc002) {
                           jjtree.clearNodeScope(jjtn002);
                           jjtc002 = false;
                         } else {
                           jjtree.popNode();
                         }
                         if (jjte002 instanceof RuntimeException) {
                           throw (RuntimeException)jjte002;
                         }
                         if (jjte002 instanceof ParseException) {
                           throw (ParseException)jjte002;
                         }
                         throw (Error)jjte002;
                       } finally {
                         if (jjtc002) {
                           jjtree.closeNodeScope(jjtn002,  2);
                         }
                       }
/*@egen*/        
               )*
}

private void relational() :
{}
{
  shift() ( <GTE>/*@bgen(jjtree) #GTE( 2) */
                  {
                    CurtaNode jjtn001 = new CurtaNode(JJTGTE);
                    boolean jjtc001 = true;
                    jjtree.openNodeScope(jjtn001);
                  }
                  try {
/*@egen*/ shift()/*@bgen(jjtree)*/
                  } catch (Throwable jjte001) {
                    if (jjtc001) {
                      jjtree.clearNodeScope(jjtn001);
                      jjtc001 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte001 instanceof RuntimeException) {
                      throw (RuntimeException)jjte001;
                    }
                    if (jjte001 instanceof ParseException) {
                      throw (ParseException)jjte001;
                    }
                    throw (Error)jjte001;
                  } finally {
                    if (jjtc001) {
                      jjtree.closeNodeScope(jjtn001,  2);
                    }
                  }
/*@egen*/        
          | <LTE>/*@bgen(jjtree) #LTE( 2) */
                  {
                    CurtaNode jjtn002 = new CurtaNode(JJTLTE);
                    boolean jjtc002 = true;
                    jjtree.openNodeScope(jjtn002);
                  }
                  try {
/*@egen*/ shift()/*@bgen(jjtree)*/
                  } catch (Throwable jjte002) {
                    if (jjtc002) {
                      jjtree.clearNodeScope(jjtn002);
                      jjtc002 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte002 instanceof RuntimeException) {
                      throw (RuntimeException)jjte002;
                    }
                    if (jjte002 instanceof ParseException) {
                      throw (ParseException)jjte002;
                    }
                    throw (Error)jjte002;
                  } finally {
                    if (jjtc002) {
                      jjtree.closeNodeScope(jjtn002,  2);
                    }
                  }
/*@egen*/        
          | <GT>/*@bgen(jjtree) #GT( 2) */
                  {
                    CurtaNode jjtn003 = new CurtaNode(JJTGT);
                    boolean jjtc003 = true;
                    jjtree.openNodeScope(jjtn003);
                  }
                  try {
/*@egen*/  shift()/*@bgen(jjtree)*/
                  } catch (Throwable jjte003) {
                    if (jjtc003) {
                      jjtree.clearNodeScope(jjtn003);
                      jjtc003 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte003 instanceof RuntimeException) {
                      throw (RuntimeException)jjte003;
                    }
                    if (jjte003 instanceof ParseException) {
                      throw (ParseException)jjte003;
                    }
                    throw (Error)jjte003;
                  } finally {
                    if (jjtc003) {
                      jjtree.closeNodeScope(jjtn003,  2);
                    }
                  }
/*@egen*/       
          | <LT>/*@bgen(jjtree) #LT( 2) */
                  {
                    CurtaNode jjtn004 = new CurtaNode(JJTLT);
                    boolean jjtc004 = true;
                    jjtree.openNodeScope(jjtn004);
                  }
                  try {
/*@egen*/  shift()/*@bgen(jjtree)*/
                  } catch (Throwable jjte004) {
                    if (jjtc004) {
                      jjtree.clearNodeScope(jjtn004);
                      jjtc004 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte004 instanceof RuntimeException) {
                      throw (RuntimeException)jjte004;
                    }
                    if (jjte004 instanceof ParseException) {
                      throw (ParseException)jjte004;
                    }
                    throw (Error)jjte004;
                  } finally {
                    if (jjtc004) {
                      jjtree.closeNodeScope(jjtn004,  2);
                    }
                  }
/*@egen*/       
          )*
}




private void shift() :
{}
{
  add() ( <SLShift>/*@bgen(jjtree) #SLShift( 2) */
                    {
                      CurtaNode jjtn001 = new CurtaNode(JJTSLSHIFT);
                      boolean jjtc001 = true;
                      jjtree.openNodeScope(jjtn001);
                    }
                    try {
/*@egen*/ add()/*@bgen(jjtree)*/
                    } catch (Throwable jjte001) {
                      if (jjtc001) {
                        jjtree.clearNodeScope(jjtn001);
                        jjtc001 = false;
                      } else {
                        jjtree.popNode();
                      }
                      if (jjte001 instanceof RuntimeException) {
                        throw (RuntimeException)jjte001;
                      }
                      if (jjte001 instanceof ParseException) {
                        throw (ParseException)jjte001;
                      }
                      throw (Error)jjte001;
                    } finally {
                      if (jjtc001) {
                        jjtree.closeNodeScope(jjtn001,  2);
                      }
                    }
/*@egen*/            
        | <URShift>/*@bgen(jjtree) #URShift( 2) */
                    {
                      CurtaNode jjtn002 = new CurtaNode(JJTURSHIFT);
                      boolean jjtc002 = true;
                      jjtree.openNodeScope(jjtn002);
                    }
                    try {
/*@egen*/ add()/*@bgen(jjtree)*/
                    } catch (Throwable jjte002) {
                      if (jjtc002) {
                        jjtree.clearNodeScope(jjtn002);
                        jjtc002 = false;
                      } else {
                        jjtree.popNode();
                      }
                      if (jjte002 instanceof RuntimeException) {
                        throw (RuntimeException)jjte002;
                      }
                      if (jjte002 instanceof ParseException) {
                        throw (ParseException)jjte002;
                      }
                      throw (Error)jjte002;
                    } finally {
                      if (jjtc002) {
                        jjtree.closeNodeScope(jjtn002,  2);
                      }
                    }
/*@egen*/            
        | <SRShift>/*@bgen(jjtree) #SRShift( 2) */
                    {
                      CurtaNode jjtn003 = new CurtaNode(JJTSRSHIFT);
                      boolean jjtc003 = true;
                      jjtree.openNodeScope(jjtn003);
                    }
                    try {
/*@egen*/ add()/*@bgen(jjtree)*/
                    } catch (Throwable jjte003) {
                      if (jjtc003) {
                        jjtree.clearNodeScope(jjtn003);
                        jjtc003 = false;
                      } else {
                        jjtree.popNode();
                      }
                      if (jjte003 instanceof RuntimeException) {
                        throw (RuntimeException)jjte003;
                      }
                      if (jjte003 instanceof ParseException) {
                        throw (ParseException)jjte003;
                      }
                      throw (Error)jjte003;
                    } finally {
                      if (jjtc003) {
                        jjtree.closeNodeScope(jjtn003,  2);
                      }
                    }
/*@egen*/            
        )*
}

private void add() :
{}
{
  mul() ( <Add>/*@bgen(jjtree) #Add( 2) */
                {
                  CurtaNode jjtn001 = new CurtaNode(JJTADD);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                }
                try {
/*@egen*/ mul()/*@bgen(jjtree)*/
                } catch (Throwable jjte001) {
                  if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    throw (RuntimeException)jjte001;
                  }
                  if (jjte001 instanceof ParseException) {
                    throw (ParseException)jjte001;
                  }
                  throw (Error)jjte001;
                } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001,  2);
                  }
                }
/*@egen*/        
        | <Sub>/*@bgen(jjtree) #Sub( 2) */
                {
                  CurtaNode jjtn002 = new CurtaNode(JJTSUB);
                  boolean jjtc002 = true;
                  jjtree.openNodeScope(jjtn002);
                }
                try {
/*@egen*/ mul()/*@bgen(jjtree)*/
                } catch (Throwable jjte002) {
                  if (jjtc002) {
                    jjtree.clearNodeScope(jjtn002);
                    jjtc002 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte002 instanceof RuntimeException) {
                    throw (RuntimeException)jjte002;
                  }
                  if (jjte002 instanceof ParseException) {
                    throw (ParseException)jjte002;
                  }
                  throw (Error)jjte002;
                } finally {
                  if (jjtc002) {
                    jjtree.closeNodeScope(jjtn002,  2);
                  }
                }
/*@egen*/        
        )*
}

private void mul() :
{}
{
  unary() ( <Mul>/*@bgen(jjtree) #Mul( 2) */
                  {
                    CurtaNode jjtn001 = new CurtaNode(JJTMUL);
                    boolean jjtc001 = true;
                    jjtree.openNodeScope(jjtn001);
                  }
                  try {
/*@egen*/ unary()/*@bgen(jjtree)*/
                  } catch (Throwable jjte001) {
                    if (jjtc001) {
                      jjtree.clearNodeScope(jjtn001);
                      jjtc001 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte001 instanceof RuntimeException) {
                      throw (RuntimeException)jjte001;
                    }
                    if (jjte001 instanceof ParseException) {
                      throw (ParseException)jjte001;
                    }
                    throw (Error)jjte001;
                  } finally {
                    if (jjtc001) {
                      jjtree.closeNodeScope(jjtn001,  2);
                    }
                  }
/*@egen*/        
          | <Div>/*@bgen(jjtree) #Div( 2) */
                  {
                    CurtaNode jjtn002 = new CurtaNode(JJTDIV);
                    boolean jjtc002 = true;
                    jjtree.openNodeScope(jjtn002);
                  }
                  try {
/*@egen*/ unary()/*@bgen(jjtree)*/
                  } catch (Throwable jjte002) {
                    if (jjtc002) {
                      jjtree.clearNodeScope(jjtn002);
                      jjtc002 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte002 instanceof RuntimeException) {
                      throw (RuntimeException)jjte002;
                    }
                    if (jjte002 instanceof ParseException) {
                      throw (ParseException)jjte002;
                    }
                    throw (Error)jjte002;
                  } finally {
                    if (jjtc002) {
                      jjtree.closeNodeScope(jjtn002,  2);
                    }
                  }
/*@egen*/        
          | <Mod>/*@bgen(jjtree) #Mod( 2) */
                  {
                    CurtaNode jjtn003 = new CurtaNode(JJTMOD);
                    boolean jjtc003 = true;
                    jjtree.openNodeScope(jjtn003);
                  }
                  try {
/*@egen*/ unary()/*@bgen(jjtree)*/
                  } catch (Throwable jjte003) {
                    if (jjtc003) {
                      jjtree.clearNodeScope(jjtn003);
                      jjtc003 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte003 instanceof RuntimeException) {
                      throw (RuntimeException)jjte003;
                    }
                    if (jjte003 instanceof ParseException) {
                      throw (ParseException)jjte003;
                    }
                    throw (Error)jjte003;
                  } finally {
                    if (jjtc003) {
                      jjtree.closeNodeScope(jjtn003,  2);
                    }
                  }
/*@egen*/        
          )*
}

private void unary() :
{}
{
     <Sub>/*@bgen(jjtree) UnarySub */
           {
             CurtaNode jjtn001 = new CurtaNode(JJTUNARYSUB);
             boolean jjtc001 = true;
             jjtree.openNodeScope(jjtn001);
           }
           try {
/*@egen*/ unary()/*@bgen(jjtree)*/
           } catch (Throwable jjte001) {
             if (jjtc001) {
               jjtree.clearNodeScope(jjtn001);
               jjtc001 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte001 instanceof RuntimeException) {
               throw (RuntimeException)jjte001;
             }
             if (jjte001 instanceof ParseException) {
               throw (ParseException)jjte001;
             }
             throw (Error)jjte001;
           } finally {
             if (jjtc001) {
               jjtree.closeNodeScope(jjtn001, true);
             }
           }
/*@egen*/          
  |  <Add>/*@bgen(jjtree) UnaryAdd */
           {
             CurtaNode jjtn002 = new CurtaNode(JJTUNARYADD);
             boolean jjtc002 = true;
             jjtree.openNodeScope(jjtn002);
           }
           try {
/*@egen*/ unary()/*@bgen(jjtree)*/
           } catch (Throwable jjte002) {
             if (jjtc002) {
               jjtree.clearNodeScope(jjtn002);
               jjtc002 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte002 instanceof RuntimeException) {
               throw (RuntimeException)jjte002;
             }
             if (jjte002 instanceof ParseException) {
               throw (ParseException)jjte002;
             }
             throw (Error)jjte002;
           } finally {
             if (jjtc002) {
               jjtree.closeNodeScope(jjtn002, true);
             }
           }
/*@egen*/          
  |  <Not>/*@bgen(jjtree) Not */
           {
             CurtaNode jjtn003 = new CurtaNode(JJTNOT);
             boolean jjtc003 = true;
             jjtree.openNodeScope(jjtn003);
           }
           try {
/*@egen*/ unary()/*@bgen(jjtree)*/
           } catch (Throwable jjte003) {
             if (jjtc003) {
               jjtree.clearNodeScope(jjtn003);
               jjtc003 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte003 instanceof RuntimeException) {
               throw (RuntimeException)jjte003;
             }
             if (jjte003 instanceof ParseException) {
               throw (ParseException)jjte003;
             }
             throw (Error)jjte003;
           } finally {
             if (jjtc003) {
               jjtree.closeNodeScope(jjtn003, true);
             }
           }
/*@egen*/     
  |  bitwiseUnary()
}

private void bitwiseUnary() :
{}
{
     <BNot>/*@bgen(jjtree) BNot */
            {
              CurtaNode jjtn001 = new CurtaNode(JJTBNOT);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
            }
            try {
/*@egen*/ unary()/*@bgen(jjtree)*/
            } catch (Throwable jjte001) {
              if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte001 instanceof RuntimeException) {
                throw (RuntimeException)jjte001;
              }
              if (jjte001 instanceof ParseException) {
                throw (ParseException)jjte001;
              }
              throw (Error)jjte001;
            } finally {
              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, true);
              }
            }
/*@egen*/      
  |  pow()
}

private void pow() :
{}
{
  atom() ( LOOKAHEAD(2) <Pow>/*@bgen(jjtree) #Pow( 2) */
                              {
                                CurtaNode jjtn001 = new CurtaNode(JJTPOW);
                                boolean jjtc001 = true;
                                jjtree.openNodeScope(jjtn001);
                              }
                              try {
/*@egen*/ unary()/*@bgen(jjtree)*/
                              } catch (Throwable jjte001) {
                                if (jjtc001) {
                                  jjtree.clearNodeScope(jjtn001);
                                  jjtc001 = false;
                                } else {
                                  jjtree.popNode();
                                }
                                if (jjte001 instanceof RuntimeException) {
                                  throw (RuntimeException)jjte001;
                                }
                                if (jjte001 instanceof ParseException) {
                                  throw (ParseException)jjte001;
                                }
                                throw (Error)jjte001;
                              } finally {
                                if (jjtc001) {
                                  jjtree.closeNodeScope(jjtn001,  2);
                                }
                              }
/*@egen*/        
         )*
}

private void atom() :
{}
{
     LOOKAHEAD(2)
     function()
  |  id()
  |  num()
  |  _null()
  |  bool()
  |  <OParen> expr() <CParen>
}

private void function()           :
{/*@bgen(jjtree) Function */
  CurtaNode jjtn000 = new CurtaNode(JJTFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Function */
    try {
/*@egen*/
    id() params()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

private void num()      :
{/*@bgen(jjtree) Num */
  CurtaNode jjtn000 = new CurtaNode(JJTNUM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) Num */
     try {
/*@egen*/
     t=<NumDouble>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/ {jjtn000.value = Double.valueOf(t.image);}
  |  t=<NumLong>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/   {jjtn000.value = Long.valueOf(t.image);}/*@bgen(jjtree)*/
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
     }
/*@egen*/
}

private void _null()       :
{/*@bgen(jjtree) Null */
  CurtaNode jjtn000 = new CurtaNode(JJTNULL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Null */
  try {
/*@egen*/
  <Null>/*@bgen(jjtree)*/
         {
           jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
         }
/*@egen*/ {jjtn000.value = null;}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

private void id()     :
{/*@bgen(jjtree) Id */
  CurtaNode jjtn000 = new CurtaNode(JJTID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) Id */
  try {
/*@egen*/
  t=<Identifier>/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

private void bool()       :
{/*@bgen(jjtree) Bool */
  CurtaNode jjtn000 = new CurtaNode(JJTBOOL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) Bool */
     try {
/*@egen*/
     <True>/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/  {jjtn000.value = Boolean.TRUE;}
  |  <False>/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/ {jjtn000.value = Boolean.FALSE;}/*@bgen(jjtree)*/
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
     }
/*@egen*/
}

private void params() :
{}
{
  <OParen> (expr() (<Comma> expr())*)? <CParen>
}

