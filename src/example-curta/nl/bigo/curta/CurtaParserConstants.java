/* Generated By:JJTree&JavaCC: Do not edit this line. CurtaParserConstants.java */
package nl.bigo.curta;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface CurtaParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int EOS = 1;
  /** RegularExpression Id. */
  int OParen = 2;
  /** RegularExpression Id. */
  int CParen = 3;
  /** RegularExpression Id. */
  int Assign = 4;
  /** RegularExpression Id. */
  int Or = 5;
  /** RegularExpression Id. */
  int And = 6;
  /** RegularExpression Id. */
  int BOr = 7;
  /** RegularExpression Id. */
  int BXOr = 8;
  /** RegularExpression Id. */
  int BAnd = 9;
  /** RegularExpression Id. */
  int Add = 10;
  /** RegularExpression Id. */
  int Sub = 11;
  /** RegularExpression Id. */
  int Pow = 12;
  /** RegularExpression Id. */
  int Mul = 13;
  /** RegularExpression Id. */
  int Div = 14;
  /** RegularExpression Id. */
  int Mod = 15;
  /** RegularExpression Id. */
  int GTE = 16;
  /** RegularExpression Id. */
  int GT = 17;
  /** RegularExpression Id. */
  int LTE = 18;
  /** RegularExpression Id. */
  int LT = 19;
  /** RegularExpression Id. */
  int SLShift = 20;
  /** RegularExpression Id. */
  int URShift = 21;
  /** RegularExpression Id. */
  int SRShift = 22;
  /** RegularExpression Id. */
  int Eq = 23;
  /** RegularExpression Id. */
  int NEq = 24;
  /** RegularExpression Id. */
  int Not = 25;
  /** RegularExpression Id. */
  int BNot = 26;
  /** RegularExpression Id. */
  int Comma = 27;
  /** RegularExpression Id. */
  int True = 28;
  /** RegularExpression Id. */
  int False = 29;
  /** RegularExpression Id. */
  int Null = 30;
  /** RegularExpression Id. */
  int Return = 31;
  /** RegularExpression Id. */
  int NumDouble = 32;
  /** RegularExpression Id. */
  int NumLong = 33;
  /** RegularExpression Id. */
  int Identifier = 34;
  /** RegularExpression Id. */
  int Digit = 35;
  /** RegularExpression Id. */
  int Letter = 36;
  /** RegularExpression Id. */
  int AlphaNum = 37;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<EOS>",
    "\"(\"",
    "\")\"",
    "\"=\"",
    "\"||\"",
    "\"&&\"",
    "\"|\"",
    "\"^\"",
    "\"&\"",
    "\"+\"",
    "\"-\"",
    "\"**\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\">=\"",
    "\">\"",
    "\"<=\"",
    "\"<\"",
    "\"<<\"",
    "\">>>\"",
    "\">>\"",
    "\"==\"",
    "\"!=\"",
    "\"!\"",
    "\"~\"",
    "\",\"",
    "\"true\"",
    "\"false\"",
    "\"null\"",
    "\"return\"",
    "<NumDouble>",
    "<NumLong>",
    "<Identifier>",
    "<Digit>",
    "<Letter>",
    "<AlphaNum>",
    "\" \"",
    "\"\\t\"",
  };

}
