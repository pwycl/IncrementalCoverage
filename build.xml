<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:jacoco="antlib:org.jacoco.ant" name="MyTask" basedir="." default="compile">

  <property name="src.dir" value="src"/>
  <property name="classes.dir" value="classes"/>

  <property name="result.classes.dir" location="classes"/>
  <property name="result.classes.instr.dir" location="classes-instr"/>

  <path id="lib.path">
    <fileset dir=".">
      <include name="lib/*.jar"/>
    </fileset>
  </path>

  <taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml">
    <classpath path="lib/jacocoant.jar"/>
  </taskdef>

  <target name="instrument" depends="compile">
    <!--  Step 2: Instrument class files  -->
    <jacoco:instrument destdir="${result.classes.instr.dir}" >
      <fileset dir="${result.classes.dir}" includes="**/*.class"/>
    </jacoco:instrument>
  </target>

  <target name="clean" description="Delete all generated files">
    <delete dir="${classes.dir}" failonerror="false"/>
    <delete file="${ant.project.name}.jar"/>
  </target>

  <target name="compile" description="Compiles the Task">
    <mkdir dir="${classes.dir}"/>
    <javac srcdir="${src.dir}" destdir="${classes.dir}" classpathref="lib.path" debug="true" includeantruntime="false" />
  </target>

  <target name="jar" description="JARs the Task" depends="compile">
    <jar destfile="${ant.project.name}.jar" basedir="${classes.dir}"/>
    <jar destfile="test.jar" basedir="${classes.dir}/test"/>
  </target>

<!--  <target name="use" description="Use the Task" depends="jar">-->
<!--    <taskdef name="helloworld" classname="HelloWorld" classpath="${ant.project.name}.jar"/>-->
<!--    <helloworld/>-->
<!--  </target>-->

  <target name="coverage-example-fastjson-dev" depends="instrument">
    <java classname="test.FastjsonDriver" fork="true">
      <classpath>
        <path refid="lib.path"/>
        <pathelement path="classes-instr"/>
      </classpath>
      <arg value="src/example-fastjson-dev/TestFastJSONDevParser.saveInput"/>
    </java>

    <java classname="test.FastjsonDriver" fork="true">
      <classpath>
        <path refid="lib.path"/>
        <pathelement path="classes-instr"/>
      </classpath>
      <arg value="src/example-fastjson-dev/TestFastJSONDevParser-TokenSymb-genTokenString-TokenLengthBound5.saveInput"/>
    </java>
  </target>

  <target name="coverage-example-rhino" depends="instrument">
<!--    <java classname="test.rhino.RhinoDriver" fork="true">-->
<!--      <classpath>-->
<!--        <path refid="lib.path"/>-->
<!--        <pathelement path="classes-instr"/>-->
<!--      </classpath>-->
<!--      <arg value="src/example-rhino/TestRhino-TokenSymb-genTokenString-TokenLengthBound5.saveInput"/>-->
<!--    </java>-->

<!--    <java classname="test.rhino.RhinoDriver" fork="true">-->
<!--      <classpath>-->
<!--        <path refid="lib.path"/>-->
<!--        <pathelement path="classes-instr"/>-->
<!--      </classpath>-->
<!--      <arg value="src/example-rhino/TestRhino.saveInput"/>-->
<!--    </java>-->

    <java classname="test.rhino.RhinoDriver" fork="true">
      <classpath>
        <path refid="lib.path"/>
        <pathelement path="classes-instr"/>
      </classpath>
      <arg value="src/example-rhino/.saveInput"/>
    </java>
  </target>

  <target name="coverage-example-javaparser" depends="instrument">
    <java classname="test.JavaparserDriver" fork="true">
      <classpath>
        <path refid="lib.path"/>
        <pathelement path="classes-instr"/>
      </classpath>
      <arg value="src/example-javaparser/TestJavaparserParser.saveInput"/>
    </java>

    <java classname="test.JavaparserDriver" fork="true">
      <classpath>
        <path refid="lib.path"/>
        <pathelement path="classes-instr"/>
      </classpath>
      <arg value="src/example-javaparser/TestJavaparserParser-TokenSymb-genTokenString-TokenLengthBound5.saveInput"/>
    </java>
  </target>

  <target name="coverage-example-expression" depends="instrument">
    <java classname="test.expression.ExpressionDriver" fork="true">
      <classpath>
        <path refid="lib.path"/>
        <pathelement path="classes-instr"/>
      </classpath>
      <arg value="src/example-expression/TestExpressionParser.saveInput"/>
    </java>

    <java classname="test.expression.ExpressionDriver" fork="true">
      <classpath>
        <path refid="lib.path"/>
        <pathelement path="classes-instr"/>
      </classpath>
      <arg value="src/example-expression/TestExpressionParser-TokenSymb-genTokenString-TokenLengthBound5.saveInput"/>
    </java>
  </target>

  <target name="coverage-example-jsqlparser" depends="instrument">
    <java classname="test.JsqlparserDriver" fork="true">
      <classpath>
        <path refid="lib.path"/>
        <pathelement path="classes-instr"/>
      </classpath>
      <arg value="src/example-jsqlparser/TestJsqlparserParser.saveInput"/>
    </java>

    <java classname="test.JsqlparserDriver" fork="true">
      <classpath>
        <path refid="lib.path"/>
        <pathelement path="classes-instr"/>
      </classpath>
      <arg value="src/example-jsqlparser/TestJsqlparserParser-TokenSymb-genTokenString-TokenLengthBound5.saveInput"/>
    </java>
  </target>

  <target name="coverage-example-MarkdownPapers" depends="instrument">
    <java classname="test.MarkdownPapersDriver" fork="true">
      <classpath>
        <path refid="lib.path"/>
        <pathelement path="classes-instr"/>
      </classpath>
      <arg value="src/example-MarkdownPapers/TestMDPParser.saveInput"/>
    </java>

    <java classname="test.MarkdownPapersDriver" fork="true">
      <classpath>
        <path refid="lib.path"/>
        <pathelement path="classes-instr"/>
      </classpath>
      <arg value="src/example-MarkdownPapers/TestMDPParser-TokenSymb-genTokenString-TokenLengthBound5.saveInput"/>
    </java>

  </target>

  <target name="coverage-example-sixpath" depends="instrument">
    <java classname="test.sixpath.SixpathDriver" fork="true">
      <classpath>
        <path refid="lib.path"/>
        <pathelement path="classes-instr"/>
      </classpath>
      <arg value="src/example-sixpath/TestSixpathParser.saveInput"/>
    </java>

    <java classname="test.sixpath.SixpathDriver" fork="true">
      <classpath>
        <path refid="lib.path"/>
        <pathelement path="classes-instr"/>
      </classpath>
      <arg value="src/example-sixpath/TestSixpathParser-TokenSymb-genTokenString-TokenLengthBound5.saveInput"/>
    </java>

  </target>

  <target name="coverage-example-mXparser" depends="instrument">
    <java classname="test.mxparser.mXparserDriver" fork="true">
      <classpath>
        <path refid="lib.path"/>
        <pathelement path="classes-instr"/>
      </classpath>
      <arg value="src/example-mXparser/TestmXparserParser.saveInput"/>
    </java>

    <java classname="test.mxparser.mXparserDriver" fork="true">
      <classpath>
        <path refid="lib.path"/>
        <pathelement path="classes-instr"/>
      </classpath>
      <arg value="src/example-mXparser/TestmXparserParser-TokenSymb-genTokenString-TokenLengthBound5.saveInput"/>
    </java>
  </target>

</project>